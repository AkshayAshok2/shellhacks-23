{"openapi":"3.0.1","info":{"title":" ESG Data API","description":"The ESG Data API provides a way for a client to retrieve current day and historical ESG data for all issuers and data points that the requesting user is entitled to receive.","version":"v1.0"},"servers":[{"url":"https://api2.msci.com/esg/data/v1.0"}],"paths":{"/parameterValues/indexes":{"get":{"summary":"/parameterValues/indexes - GET","description":"This endpoint returns a list of indexes to which the accessing account has been permitted. The returned value includes both the index name and the index code. The index code can be used in other requests that can use index IDs as input to the request.","operationId":"get-parametervalues-indexes","responses":{"200":{"description":"This endpoint returns a list of indexes that are available to the caller based on their account permissions. These indexes are the same set of indexes that the client would see if selecting an index in MSCI ESG Manager. The result of this endpoint is a list of basic index information including name, ticker and id. The index id values can be used as parameters to the issuers endpoint to restrict results to issuers found in the specified indexes.","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultObject"},"examples":{"default":{"value":null}}}}},"401":{"description":"Unauthorized"},"403":{"description":"No subscription available for this data"},"500":{"description":"Unexpected Server Error"},"503":{"description":"Service Unavailable"}}}},"/issuers":{"get":{"summary":"/issuers - GET","description":"This endpoint is used to retrieve factor data based on the parameters given in the request. The results are governed by the data points and issuer coverage permissioned to the account. This request allows the caller to specify which data they want to retrieve, and from which 'universe' of companies. For example, a request could ask for all *ESG Ratings:Company Summary* category data for issuers in the Banks ESG Rating Industry (15698). The result would be a JSON object with a list of issuers along with the requested data. The query would look like this:\n\n.....\nhttps://api.msci.com/esg/data/v1.0/issuers?category_path_list=ESG Ratings:Company Summary&esg_industry_id_list=15698&coverage=esg_ratings\n.....\n\nThe inclusion of the coverage ensures that only issuers who have ESG related information is returned in the result.","operationId":"get-issuers","parameters":[{"name":"format","in":"query","description":"The result of the issuers endpoint will be returned in JSON format by default. However, the result can also be returned as a CSV file, which can then be imported directly into application such as Excel. The CSV format consists of a header row identifying each column, followed by one or more rows of data. XML can also be specified and the result will be a properly formatted XML document without a DTD or schema.","schema":{"type":"string","default":"json","x-Position":0,"x-AcceptedValue":"json, csv, xml","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null},"example":"json"},{"name":"offset","in":"query","description":"Format - int32. The Data API has the potential to generate large amounts of data. If a query will result in extra large amounts of data, the user will be required to specify paging parameters. The offset value  indicates which record to start retrieving values. This option is usually paired with the limit parameter to create a window of results to return. When paging is using, an additional section of the JSON response will contain information about the total number of records that could be returned, along with links for the next,prev,first,last pages where appropriate. If you are on the last page, no *next* link will be generated, for example.","schema":{"type":"integer","format":"int32","x-Position":0,"x-ValidationConstraints":"Must be greater than zerio","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null}},{"name":"limit","in":"query","description":"Format - int32. The Data API has the potential to generate large amounts of data. If a query will result in extra large amounts of data, the user will be required to specify paging parameters. The limit value indicates the maximum number of records to return. This option is usually paired with the offset parameter to create a window of results to return. When paging is using, an additional section of the JSON response will contain information about the total number of records that could be returned, along with links for the next,prev,first,last pages where appropriate. If you are on the last page, no *next* link will be generated, for example.","schema":{"type":"integer","format":"int32","x-Position":0,"x-ValidationConstraints":"Must be greater than one","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null}},{"name":"reference_column_list","in":"query","description":"If a parent/child option is specified, other than do_not_apply, the client can also specify one or more 'reference' columns to appear along with any inherited values. These values help to identify the soure of the inheritance. The issuerid column will contain the MSCI issuer id of the issuer from which the value is derived. Similarly the issuername column will contain the name of the issuer. Finally, the level is a numeric value indicating how many levels away from the issuer the value was inherited from.","schema":{"type":"array","items":{"type":"string","x-AcceptedValue":"issuerid, issuer_id, issuername, issuer_name, level","x-Position":0},"x-Position":0,"x-AcceptedValue":"issuerid, issuername, level","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null}},{"name":"parent_child","in":"query","description":"This option is used to control how data is inherited from parent entities, and or whether to include subsidiaries of an issuer. A client must have purchased the Subsidiary Mapping feature for this option to have any effect. \n\nThe 'inherit_missing_values' will include data values from parent issuers if the issuer does not have a value of it's own.\n\nThe 'include_subsidiaries' will include subsidiaries of an issuer.\n\nThe 'full_parent_child' option will both inherit missing data values from the parent as well as include subsidiaries of an issuer.\n\nThe default is 'do_not_apply'.","schema":{"type":"string","default":"do_not_apply","x-Position":0,"x-AcceptedValue":"do_not_apply, inherit_missing_values, include_subsidiaries, full_parent_child","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":"parent_child"}},{"name":"product_name_list","in":"query","description":"This parameter is a list of one or more product names which contain groups of data factors. Data factors are grouped by category as well as by product name. A product name is used to identify a product to which a data factor must belong in order to be returned. The list of products available to the caller can be found via the /parameterValues/factorProductNames endpoint.","schema":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":0,"x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":"product_names"}},{"name":"category_path_list","in":"query","description":"This parameter is a list of one or more category path strings.\nA category path is used to identify a collection of data factors. All category paths available to the caller can be obtained from the /parameterValues/factorCategoryPaths endpoint.","schema":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":0,"x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":"category_paths"}},{"name":"factor_name_list","in":"query","description":"This is a list of factor names. A factor name is used to identify a unique data point value associated with an issuer. A full list of available factors for the caller can be found by using the /metadata/factors endpoint.","schema":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":0,"x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":"factor_names"}},{"name":"coverage","in":"query","description":"A coverage is an identifier used to limit the list of issuers in the result to those that belong to the specified coverage universe. For example, the esg_ratings coverage would only include issuers that have an ESG Rating.","schema":{"type":"string","x-Position":0,"x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null},"example":"esg_ratings"},{"name":"name_contains","in":"query","description":"The name_matches string is used to locate issuers whose primary issuer name value contains the given string anywhere in the name. If parent/child options are used, additional issuers may be returned that are related to the primary issuer, but will not necessarily match the pattern given.","schema":{"type":"string","x-Position":0,"x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null}},{"name":"starts_with","in":"query","description":"Limit the primary issuer to a name that starts with the specified value. If parent/child options are specified, there may be issuers included that don't start with the specified name.","schema":{"type":"string","x-Position":0,"x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null}},{"name":"gics_subindustry_id_list","in":"query","description":"This parameter is a list of one or more gics subindustry codes. The issuers returned will be limited to those belonging to the specified GICS Sub Industries.\n\nA GICS SubIndustry code is a string value which is used to identify a particular GICS SubIndustry. A full list of GICS SubIndustries is available from the /parameterValues/gicsSubIndustries endpoint.","schema":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":0,"x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":"gics_subindustry_ids"}},{"name":"esg_industry_id_list","in":"query","description":"This parameter is a list of one or more ESG Industry codes. The issuers returned will be limited to those belonging to the specified ESG Industries.\n\nThe ESG Industry ID is a string value that identifies an ESG Industry. A full list of available ESG Industries can be retrieved from the /parameterValues/esgIndustries endpoint","schema":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":0,"x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":"esg_industry_ids"}},{"name":"country_code_list","in":"query","description":"This parameter contains a list of one or more country codes which is associated with the issuer. A Country Code is the 2 character code representing a country..","schema":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":0,"x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":"country_codes"}},{"name":"index_identifier_list","in":"query","description":"A collection of index identifiers compatible with MSCI ESG Manager. An index identifier is a string value which identifies an index to use for a query. Indexes are used to limit the results of a request to a specific set of issuers that belong to the specified index. A full list of indexes that are available to the caller can be retrieved at /parameterValues/indexes","schema":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":0,"x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":"indexes"}},{"name":"issuer_identifier_type","in":"query","description":"When requesting data, the client can specify a list of one or more issuer identifiers for which data will be returned. The default issuer identifier is an MSCI issuer id. However, by specifying a different lookup factor, the client can specify IDs such as ISINs. All identifiers must be of the same type, however. For example, mixing ISINs and MSCI Issuer Ids is not allowed.","schema":{"type":"string","x-Position":0,"x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":"lookup_factor"}},{"name":"issuer_identifier_list","in":"query","description":"This parameter is used to limit the results to a specific set of issuers. The caller can list one or more issuer identifiers which identified the issuers for which data should be returned.\n\nThe issuer identifier is a value that is used to locate an issuer within the universe of issuers available to the client. By default, this identifier is an MSCI Issuer ID value, but this can also be a different identifier type when the issuer_identifier_type is specified. All identifiers must be of the same type.","schema":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":0,"x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":"issuer_ids"}}],"responses":{"200":{"description":"The issuers endpoint returns a collection of data for the issuers and datapoints requested. By default, the result is returned in JSON format. The results can also be returned as a CSV file if the request uses the format parameter, or if the accept header specifies text/csv as an acceptable result."},"206":{"description":"If a request contains some minor errors in specification, for example a factor category or product name wasn't found, the request may still return results. Any issues will be identified in the 'messages' portion of the result, but the results may be incomplete based on what the client requested.\n\nFor example, suppose a request asked for the factors IVA_RATING_DATE and IVA_RATING. There is no factor named IVA_RATING. The response would return all data that could be found, but would also indicate that there was no factor named IVA_RATING. The client would have to update their query to use IVA_COMPANY_RATING instead."},"400":{"description":"Malformed request"},"401":{"description":"Unauthorized"},"403":{"description":"No subscription available for this data"},"500":{"description":"Unexpected Server Error"},"503":{"description":"Service Unavailable"}}},"post":{"summary":"/issuers - POST","description":"In addition to requesting issuer data via a GET request, users can also create a POST request where the POSTed data consists of the various query parameters that are available on the GET request. The POST form of this endpoint allows for potentially large amounts of data to be specified. For example, a client may have a list of issuers IDs that they wish to retrieve data for. Specifying the ids in a GET request may exceed the maximum length allowed for a GET request. A POST request has no such limit. \n\nIt is important to note that any POST request specify the Content-Type being used for submission. For example, if JSON is being used to send data, the Content-Type should be application/json, otherwise the request may be rejected with a 400 status code and an 'Invalid formatting' error message.","operationId":"post-issuers","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/IssuerRequest"},"example":{"issuer_identifier_list":["IID000000002157615","IID000000002745031"],"factor_name_list":["IVA_COMPANY_RATING","IVA_RATING_DATE"],"parent_child":"full_parent_child","reference_column_list":["issuerid","issuername","level"],"limit":10,"offset":0,"format":"json"}}}},"responses":{"200":{"description":"The issuers endpoint returns a collection of data for the issuers and datapoints requested. By default, the result is returned in JSON format. The results can also be returned as a CSV file if the request uses the format parameter, or if the accept header specifies text/csv as an acceptable result."},"206":{"description":"If a request contains some minor errors in specification, for example a factor category or product name wasn't found, the request may still return results. Any issues will be identified in the 'messages' portion of the result, but the results may be incomplete based on what the client requested.\n\nFor example, suppose a request asked for the factors IVA_RATING_DATE and IVA_RATING. There is no factor named IVA_RATING. The response would return all data that could be found, but would also indicate that there was no factor named IVA_RATING. The client would have to update their query to use IVA_COMPANY_RATING instead."},"400":{"description":"Bad Request"},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not found"},"500":{"description":"Internal Server Error"}}}},"/parameterValues/countries":{"get":{"summary":"/parameterValues/countries - GET","description":"This endpoint is used to retrieve a list of country code and corresponding country names that are available to the caller based on their permissions. The country codes can be used in queries for issuer data.","operationId":"get-parametervalues-countries","responses":{"200":{"description":"Success","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultObject"},"examples":{"default":{"value":null}}}}},"401":{"description":"Unauthorized"},"403":{"description":"No subscription available for this data"},"500":{"description":"Unexpected Server Error"},"503":{"description":"Service Unavailable"}}}},"/parameterValues/esgIndustries":{"get":{"summary":"/parameterValues/esgIndustries - GET","description":"This endpoint provides a list of ESG Industry codes and names. The industry codes can be used in other endpoints that take an ESG industry id as a parameter.","operationId":"get-parametervalues-esgindustries","responses":{"200":{"description":"This endpoint will return a JSON response of ESG Industries consisting of the industry name and industry code. The industry code can be used as input to the issuers query to restrict responses to issuers belonging to the specified industry or industries.","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultObject"},"examples":{"default":{"value":null}}}}},"401":{"description":"Unauthorized"},"403":{"description":"No subscription available for this data"},"500":{"description":"Unexpected Server Error"},"503":{"description":"Service Unavailable"}}}},"/issuers/history":{"get":{"summary":"(Beta Phase)","description":"The /issuers/history endpoint provides a mechanism to retrieve ESG data history for a given set of issuer identifiers. A user of the API can send in a list of issuer identifiers, a range of dates, and a collection of data factors to retrieve, and the API will return the values for each of the requested factors for the given time range. There are several options available to control how much data is returned.  \n\nThe endpoint will support requests using both GET and POST. The POST method should be the method used by most API applications since it can support a larger request size (identifiers, factor names, etc.). The GET method would typically be used for quick experimental queries. \n\nThe API accepts two types of input parameters to the request, one form of input initiates a new retrieval request, the other is used to return subsequent batches of data. The /issuers/history endpoint uses a dynamic batching scheme to return data if the results are too large to return in one request (see the section on data batching for more details on how large results are returned) \n\nThe basic request for data will include the following information:\n\n* A list of one or more identifiers. These identifiers will be used to locate companies (issuers) who have ESG Data. The identifiers can represent Bonds, Securities, or the issuers themselves.\n* A list of data factors. The factors can be the names of the factors themselves, or the request can contain category paths or product names which are used to map to data factors. Factor information is available through other API endpoints such as /metadata/factors, /parameterValues/factorCategoryPaths, and /parameterValues/factorProductNames\n* A date range. The API supports date ranges of 1 date to many dates. \n* Other parameters to fine tune the request","operationId":"get-issuers-history-start_date-start_date-issuer_identifier_list-issuer_iden","parameters":[{"name":"start_date","in":"query","description":"Format - date (as full-date in RFC3339). \nThe first date to be used for data retrieval. If only a start_date is given, only data for the specified date will be returned.","required":true,"schema":{"type":"string","format":"date","default":"json","x-Position":0,"x-AcceptedValue":"json, csv, xml","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null},"example":"json"},{"name":"issuer_identifier_list","in":"query","description":"\nA list of one or more issuer/instrument identifiers which resolve to issuers. Identifiers can be MSCI Issuer IDs, ISINs, CUSIPs, MDS UIDS, etc","required":true,"schema":{"type":"array","items":{"type":"string","x-Position":0},"default":"json","x-Position":0,"x-AcceptedValue":"json, csv, xml","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null},"example":"json"},{"name":"format","in":"query","description":"The result of the issuers endpoint will be returned in JSON format by default. However, the result can also be returned as a CSV file, which can then be imported directly into application such as Excel. The CSV format consists of a header row identifying each column, followed by one or more rows of data. The CSV format is supported with only  data_layout parameter value \"by_factor\".","schema":{"type":"string","default":"json","x-Position":0,"x-AcceptedValue":"json, csv","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null},"example":"json"},{"name":"inherit_missing_values","in":"query","description":"\nA Boolean value used to indicate whether the API should inherit missing values from a parent issuer. This option will automatically be set to true if the caller is permitted to receive inherited data. This option is not available to clients who do not have the inheritance feature associated with their account.","schema":{"type":"boolean"}},{"name":"data_layout","in":"query","description":"\nThe API offers different data layouts to suit the different ways that a client may want to process the data that they receive. The Data Layout options provide a way for the client to tailor the output to their needs\n\n|====================\n|Data Layout Name |Description\n|by_factor\n|The data results will be grouped by factor, and within each factor the values will be display in reverse chronological order \n|matrix_by_factor\n|This layout is more compressed than the standard by_factor layout and is designed to support usage by quants who will want data rows with no gaps. The exact layout of the data content is still being finalized, but it will represent the data as a 2-d matrix. This layout is compatible with both daily and business_month_end sample frequencies. \n|change_ranges\n|This layout will only show change ranges for each value returned. Ranges will start at the first date in the requested range and end on the last date. If a value for a factor was value for 3 months in the range, and then changed and was valid for the remaining months, there would be two value ranges in the result for that particular value. \n|====================","schema":{"type":"string","default":"json","x-Position":0,"x-AcceptedValue":"json, csv, xml","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null},"example":"json"},{"name":"data_sample_frequency","in":"query","description":"\nThe API treats historical data as a continuous stream of values for the date range specified in the call. The user can choose how often they would like to sample the stream of data. Perhaps the client only cares about what the value is at the end of each month, for example. The following options are available for the Data Sample Frequency parameter:\n\n|====================\n|Data Sample Name |Description\n|daily\n|A data value sample will be taken from each date in the specified range. If there are 200 days in the given range, there will be 200 samples taken from the stream of values, one for each day in the range. The daily range is currently only available when using the matrix_by_factor layout.\n|business_month_end\n|A data value sample will be taken from each business month end date in the specified range. If there are 12 months in the given range, there will be 12 samples taken from the stream of values, one for each business month end day in the range \n|====================","schema":{"type":"string","default":"json","x-Position":0,"x-AcceptedValue":"json, csv, xml","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null},"example":"json"},{"name":"as_at_date","in":"query","description":"Format - date (as full-date in RFC3339). \nA date which defines which corrections should be returned. If the as_at_date is before the end_date, the as_at_date will override the end_date. No values will be returned beyond the specified as_at_date. If no as_at_date is specified, the data will be viewed from the perspective of the date that the request was made.\n\nThe 'as at' date functions like a time machine. It allows the client to go back in time to view data from a particular point in time in the past. The values that are returned will be the values that would have been seen if a request had been made on the specified 'as at' date.","schema":{"type":"string","format":"date","default":"json","x-Position":0,"x-AcceptedValue":"json, csv, xml","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null},"example":"json"},{"name":"end_date","in":"query","description":"Format - date (as full-date in RFC3339). \nThe end date for the range of values to be returned. If not specified, the request will return a single value corresponding to the given start_date. The end_date cannot exceed the as_at_date. If the end_date is after the as_at_date, the request will be rejected with a 400 status code.","schema":{"type":"string","format":"date","default":"json","x-Position":0,"x-AcceptedValue":"json, csv, xml","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null},"example":"json"},{"name":"factor_name_list","in":"query","description":"\nA list of ESG Factor names as defined in the ESG Factor Metadata. Factor names, product names, and category paths can be mixed together, but at least one factor name, category path, or product name must be specified for a request to be valid.","schema":{"type":"array","items":{"type":"string","x-Position":0},"default":"json","x-Position":0,"x-AcceptedValue":"json, csv, xml","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null},"example":"json"},{"name":"product_name_list","in":"query","description":"\nA list of factor product names as defined in the ESG Factor Metadata. The factor product name determines a set of data factors to retrieve. This has the same functionality as the current day endpoint. Product names, category paths, and factor names can be mixed together, but at least one factor name, category path, or product name must be specified for a request to be valid.","schema":{"type":"array","items":{"type":"string","x-Position":0},"default":"json","x-Position":0,"x-AcceptedValue":"json, csv, xml","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null},"example":"json"},{"name":"category_path_list","in":"query","description":"\nA list of factor category paths as defined in the ESG Factor Metadata. The factor category path determines a set of data factors to retrieve. This works the same as the current day endpoint. Category paths, product names, and factor names can be mixed together, but at least one factor name, category path, or product name must be specified for a request to be valid. ","schema":{"type":"array","items":{"type":"string","x-Position":0},"default":"json","x-Position":0,"x-AcceptedValue":"json, csv, xml","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null},"example":"json"}],"responses":{"200":{"description":"===== API Responses and Layouts \n\nAll responses from the API are returned in JSON format. All responses have a similar structure but at the core of any response is the data property. For example, all output from /issuers/history will have this basic structure: \n\n \n[source,json]\n----\n{ \n  \"status\": \"OK\", \n  \"code\": 200, \n  \"trace_id\": \"06b4f3a2d92f9d5a\", \n  \"timestamp\": \"2019-09-18T12:47:35Z\", \n  \"messages\": [], \n  \"result\": { \n    \"response_metadata\": { \n      \"total_number_of_instruments\": 1, \n      \"total_number_of_unresolved_identifiers\": 0, \n      \"total_number_of_batches\": 1, \n      \"current_batch\": 1, \n      \"data_request_id\": \"33e51f26-8c3e-4c84-ab00-2d60f945ec47\" \n    }, \n    \"data\":  <content controlled by data_layout option>\n  } \n} \n---- \n\nDifferent users have different ways that they would like to view the same data, so the API offers a data_layout option to account for this. The default data layout is the by_factor layout. This layout groups the data for each issuer in a list of factors, and within each factor, data is returned in reverse chronological order (newest to oldest). Other layouts are currently being designed, including a matrix layout which is a more condensed layout that is more suitable to use by quants and a change_ranges layout which would only return changed data points for the given time-period with information about when the data was valid.\n\n====== Standard Base Response\n\n\nThe API treats historical data as a continuous stream of values for the date range specified in the call. The user can choose how often they would like to sample the stream of data. Perhaps the client only cares about what the value is at the end of each month, for example. The following options are available for the Data Sample Frequency parameter:\n|====================\n|Property |Description\n|status|HTTP Status Code (string)\n|code|HTTP Status Code (integer)\n|trace_id|Trace ID for the request (string)\n|timestamp|ISO 8601 Date Format representing the time the response was generated (string) \n|messages|Array of informational strings relating to any warnings or other non-error issues \n|result|A JSON object containing the result (Result Object)\n|====================\n\n\n===== Result Object \n\nThe Result Object is a bundle of information containing the result and consists of the following properties: \n|================\n|Property|Description \n|response_meta_data|Meta data about the response (Response Meta Data) \n|data|Exact content changes based on the desired layout. The default layout for data is an array of Issuer Response objects \n|================\n \n\n===== Response Meta Data Object \n\nThe Response Meta Data object contains details about the request, including information on number of instruments requested, number of batches that can be returned, etc. The available properties are:  \n|================\n|Property|Description \n|total_number_of_instruments |Total number of instruments returned \n|total_number_of_unresolved_identifiers|Total number of identifiers that were not able to be resolved , An identifier is only unresolved if it did not exist at all during the specified time range \n|total_number_of_batches|Total number of result batches \n|current_batch |The index of the current batch \n|data_request_id |The id representing this request. It can be used in future requests to retrieve subsequent batches of data. \n|unresolved_identifiers |A list of Unresolved Identifier objects \n|unresolved_factors |A list of Unresolved Factor objects \n|================\n\n\n===== Unresolved Identifier Object \nThe Unresolved Identifier object is used to hold information about identifiers that were passed as parameters but were unable to be resolved for some reason and therefore data will not be returned. The available properties are: \n|================\n|Property|Description \n|identifier |The identifier as entered by the user \n|reason |A short string identifying why the identifier was not matched \n|================ \n\n\n===== Unresolved Factor Object \n\nThe Unresolved Factor object is used to hold information about factors that were passed as parameters but were not valid for some reason. The available properties are: \n|================\n|Property|Description  \n|factor name |The factor name as entered by the user \n|reason |A short string identifying why the identifier was not matched \n|================\n\n \n===== Data Layout Definitions  \n\nAs indicated previously, the history endpoint can represent the response using different layouts designed to suit different client needs. \n\n\n===== by_factor Layout \n\nThe default Issuer Response object uses the by_factor layout. This organizes data into groups of factors for each requested identifier, where each factor will contain a set of data samples based on the sample frequency specified by the user. The object is keyed by the identifier given by the user in their input, but the data is the data for the issuer to which the identifier was resolved.  \n|================\n|Property|Description \n|requested_id |The requested ID of the issuer. This will be the id that the client used to identify the issuer and may be an instrument id, bond id, ticker, isin, etc. This id is not necessarily the ID of the issuer. If an instrument ID is given, perhaps a CUSIP, the id value will be the CUSIP requested by the user, the CUSIP (if it exists at all) for the issuer may be different \n|issuer_metadata |Array of Issuer Metadata objects \n|factors |Array of Factor Data objects \n|================\n\n\n===== Issuer Metadata Object\n\nThe Issuer Metadata object contains basic details about the issuer such as the issuer name and other identifiers that may be useful.  \n\nTo handle the possibility that issuer metadata may have changed over the course of the given date range, the object includes an as_of_date and a valid_until_date to identify the date range for which the metadata is valid. For example, a company name may have changed and for part of the date range the company was named  and for another part it was named . The metadata will capture this information and indicate the range of dates for which the metadata is valid.  \n\nFor most results we expect there would only be one Issuer Metadata object. If there is only one metadata object, the as_of_date value would be the start of the specified date range, and the valid_until_date value would be the last date in the specified range.  \n\nNote that the metadata names are all upper case. This is because these are the names defined in the ESG Factor Metadata and we want to be consistent with our factor naming. \n |================\n|Property|Description  \n|ISSUER_NAME |The issuer name \n|ISSUER_ISIN |Issuer isin \n|ISSUER_LEI |Issuer lei \n|ISSUER_TICKER |Issuer ticker \n|CIK_NUM |Issuer CIK Number \n|ISSUERID |MSCI Issuer Id \n|as_of_date |Date for which the data is initially valid \n|valid_until_date |Last date for which data is valid \n|================\n \n===== Factor Data Object \n\nThe Factor Data object contains information for a requested data factor. The object is identified by its name and will contain an array of one or more Factor Data Value objects which contain the results for a specific date or timeframe. \n|================\n|Property|Description \n|name |The name of the factor. The name will be the column header defined in the ESG Factor Metadata \n|data_values |Array of Factor Data Value objects \n|================\n \n===== Factor Data Value Object \n\nThe Factor Data Value object contains the value for a single data factor for a single point in time or date range.  \n\nWhen a request is made, the client can specify a data sample frequency. For each date in the specified sample frequency a Factor Data Value object will exist containing the value for the given date, an as_of_date value indicating the date of the data sample, and an as_at date, which is the value the client will have passed in on the request.  \n\nFor example, if the client requests sampling on business_month_end dates, for the past 12 months, the result would contain 12 Factor Data Value factors for each requested data factor. The as_of_date in each object would be the appropriate business month end date. In all cases, the as_at_date will be the value passed in by the client in the request. \n\nIn the first version of the API, this by_factor layout will require the business_month_end data sample frequency. In the future we expect to expand this format to other sampling frequency values.   |================\n|Property|Description  \n|value|The value for the factor \n|as_of_date |The as_of_date for the factor \n|as_at_date |The as_at date used to determine the value \n|================\n\n*See <<by_factor_layout>> for full example*\n\n====== change_ranges Layout \n\nThe change_ranges layout is very similar to the standard by_factor layout. The only difference is in the way the data values are represented. In the by_factor layout, we represent each value as a single point in time, this is why the data value only has as_of_date and as_at_date properties for dates. The user has requested a value for a specific point in time.  \n\n\nThe change_ranges layout is used when the client only cares about the unique values for a data factor over a specified time range. If the user requests the ESG Rating for Microsoft for the past year, they might only care to see how the rating changed over the time-period. The client might not want to see 12 A values, for example. \n\n\nAs mentioned, the data structure for the change_ranges layout is virtually identical to by_factor. Instead of using the Factor Data Value object in the Factor Data Object, a Factor Data Change Value Object will be used. \n\n====== Factor Data Change Value Object \n\nThe Factor Data Change Value object contains the value for a single data factor for a specific validity range. The object has properties to indicate the as_of_date when the factor value should be considered value, and a valid_until_date which represents the date that the value changed to a new value.  \n\nUnlike the by_factor layout, the change_ranges layout does not support a data_sample_frequency value. For this layout, there is no concept of data sampling, the data output just represents all the changes that exist within the time range specified in the request. A request for 12 months of data could result in 1 or more data values, depending on how many times the value of the factor changed in the time-period.  \n|================\n|Property|Description \n|value |The value for the factor \n|as_of_date |The as_of_date for the factor \n|valid_until_date |The date a new value took effect. The value should be considered valid up until this date. \n|as_at_date |The as_at date used to determine the value \n|================\n \n\nSee <<change_ranges_layout>> for full example\n\n====== matrix_by_factor Layout \n\nThe currently proposed output of the matrix_by_factor layout would take the following form: \n\nAs with the by_factor layout, the matrix_by_factor layout would be contained within the standard response JSON structure described earlier: \n|================\n|Property|Description \n|status |Http Status Code (string) \n|code |Http Status Code (integer) \n|trace_id |Trace id for the request (string) \n|timestamp |ISO 8601 Date Format representing the time the response was generated (string) \n|messages |Array of informational strings relating to any warnings or other non-error issues \n|result |A JSON object containing the result (Result Object) \n|================ \n\n===== Result Object \n\nThe Result Object of a matrix_by_layout data layout has a change with the content of the data property. Instead of being an array of Issuer Response objects, the data object simply contains a single JSON object with three properties which represent the matrix of information to be returned: \n|================\n|Property|Description \n|response_meta_data |Meta data about the response (Response Meta Data) \n|data |A single instance of a Matrix Data Object \n|================\n\n \n===== Matrix Data Object \n\nThe Matrix Data Object is a JSON object with the following structure and content: \n|================\n|Property|Description \n|requested_ids |An array of strings containing the issuer identifiers given in the request. If 10 identifiers are given, the array will contain 10 values \n|dates |An array of dates which encompass the specified date range and data sample frequency in YYYY-MM-DD format. The dates will be in chronological order from oldest to newest. \n|factors |An array containing one or more Matrix Factor objects \n|================\n\n\n===== Matrix Factor Object \n\nThe Matrix Factor Object contains all the values for all of the dates and issuers for a single data factor. It has the following properties: \n|================\n|Property|Description \n|factor|The name of the data factor \n|values|This is an array of arrays of data values. The outermost array contains data values for each of the requested ids. The inner array represents all the data values for the given factor for the requested dates \n|================  \n\n\nSee <<matrix_by_factor_layout>> for full example\n\n===== *Sample Outputs*\n\n[[by_factor_layout]]*by_factor layout:*\n\n*Input*\n\n----------\n{\n\t\"issuer_identifier_list\": [\n\t\t\"IID000000002745031\"\n\t],\n\t\"factor_name_list\": [\n        \"ESG_RATING\",\n        \"ISSUER_NAME\",\n        \"ISSUER_ISIN\",\n        \"ISSUER_SEDOL\",\n        \"ISSUERID\"\n\t],\n\n\t\"start_date\": \"2019-09-01\",\n\t\"end_date\": \"2019-12-01\",\n\t\"data_layout\": \"by_factor\",\n\t\"data_sample_frequency\": \"business_month_end\",\n\t\"inherit_missing_values\": true\n}\n----------\n\n*Output*\n-------------------------------------------------------\n{\n  \"status\": \"OK\",\n  \"code\": 200,\n  \"trace_id\": \"158760f24d9cd939\",\n  \"timestamp\": \"2019-12-02T14:22:41Z\",\n  \"messages\": [],\n  \"result\": {\n    \"response_metadata\": {\n      \"total_number_of_instruments\": 1,\n      \"total_number_of_unresolved_identifiers\": 0,\n      \"total_number_of_batches\": 1,\n      \"current_batch\": 1,\n      \"data_request_id\": \"0-e4891be4-af17-4c43-980e-c524fc4a8350-2019-12-03T14:22:08+0000\",\n      \"data_request_id_expiration_time\": \"2019-12-03T14:22:08+0000\"\n    },\n    \"data\": [\n      {\n        \"requested_id\": \"IID000000002745031\",\n        \"issuer_metadata\": [\n          {\n            \"ISSUERID\": \"IID000000002745031\",\n            \"ISSUER_NAME\": \"ALPHABET INC.\",\n            \"CIK_NUM\": \"0001652044\",\n            \"ISSUER_ISIN\": \"US02079K1079\",\n            \"ISSUER_TICKER\": \"GOOGL\",\n            \"as_of_date\": \"2019-09-30\",\n            \"valid_until_date\": \"2019-10-01\"\n          }\n        ],\n        \"factors\": [\n          {\n            \"name\": \"ESG_RATING\",\n            \"data_values\": [\n              {\n                \"value\": \"AA\",\n                \"as_of_date\": \"2019-09-30\",\n                \"as_at_date\": \"2019-12-02\"\n              },\n              {\n                \"value\": \"AA\",\n                \"as_of_date\": \"2019-10-31\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"ISSUER_NAME\",\n            \"data_values\": [\n              {\n                \"value\": \"ALPHABET INC.\",\n                \"as_of_date\": \"2019-09-30\",\n                \"as_at_date\": \"2019-12-02\"\n              },\n              {\n                \"value\": \"ALPHABET INC.\",\n                \"as_of_date\": \"2019-10-31\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"ISSUER_ISIN\",\n            \"data_values\": [\n              {\n                \"value\": \"US02079K1079\",\n                \"as_of_date\": \"2019-09-30\",\n                \"as_at_date\": \"2019-12-02\"\n              },\n              {\n                \"value\": \"US02079K1079\",\n                \"as_of_date\": \"2019-10-31\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"ISSUER_SEDOL\",\n            \"data_values\": [\n              {\n                \"value\": \"BYY88Y7\",\n                \"as_of_date\": \"2019-09-30\",\n                \"as_at_date\": \"2019-12-02\"\n              },\n              {\n                \"value\": \"BYY88Y7\",\n                \"as_of_date\": \"2019-10-31\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"ISSUERID\",\n            \"data_values\": [\n              {\n                \"value\": \"IID000000002745031\",\n                \"as_of_date\": \"2019-09-01\"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n-------------------------------------------------------\n\n[[change_ranges_layout]*change_ranges layout:*\n\n*Input*\n---------------------\n{\n\t\"issuer_identifier_list\": [\n\t\t\"IID000000002745031\"\n\t],\n\t\"factor_name_list\": [\n        \"ESG_RATING\",\n        \"ISSUER_NAME\",\n        \"ISSUER_ISIN\",\n        \"ISSUER_SEDOL\",\n        \"ISSUERID\"\n\t],\n\n\t\"start_date\": \"2019-10-01\",\n\t\"end_date\": \"2019-12-01\",\n\t\"data_layout\": \"change_ranges\",\n\t\"inherit_missing_values\": true\n}\n---------------------\n\n*Output*\n-------------------------------------------------------\n{\n  \"status\": \"OK\",\n  \"code\": 200,\n  \"trace_id\": \"e8d5a08ec990f91d\",\n  \"timestamp\": \"2019-12-02T14:33:42Z\",\n  \"messages\": [],\n  \"result\": {\n    \"response_metadata\": {\n      \"total_number_of_instruments\": 1,\n      \"total_number_of_unresolved_identifiers\": 0,\n      \"total_number_of_batches\": 1,\n      \"current_batch\": 1,\n      \"data_request_id\": \"1-938891fb-4e5a-4f37-9943-8908380d328b-2019-12-03T14:33:42+0000\",\n      \"data_request_id_expiration_time\": \"2019-12-03T14:33:42+0000\"\n    },\n    \"data\": [\n      {\n        \"requested_id\": \"IID000000002745031\",\n        \"issuer_metadata\": [\n          {\n            \"ISSUERID\": \"IID000000002745031\",\n            \"ISSUER_NAME\": \"ALPHABET INC.\",\n            \"CIK_NUM\": \"0001652044\",\n            \"ISSUER_ISIN\": \"US02079K1079\",\n            \"ISSUER_TICKER\": \"GOOGL\",\n            \"as_of_date\": \"2019-10-01\",\n            \"valid_until_date\": \"2019-12-01\"\n          }\n        ],\n        \"factors\": [\n          {\n            \"name\": \"ESG_RATING\",\n            \"data_values\": [\n              {\n                \"value\": \"AA\",\n                \"as_of_date\": \"2019-10-01\",\n                \"valid_until_date\": \"2019-12-01\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"ISSUER_NAME\",\n            \"data_values\": [\n              {\n                \"value\": \"ALPHABET INC.\",\n                \"as_of_date\": \"2019-10-01\",\n                \"valid_until_date\": \"2019-12-01\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"ISSUER_ISIN\",\n            \"data_values\": [\n              {\n                \"value\": \"US02079K1079\",\n                \"as_of_date\": \"2019-10-01\",\n                \"valid_until_date\": \"2019-12-01\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"ISSUER_SEDOL\",\n            \"data_values\": [\n              {\n                \"value\": \"BYY88Y7\",\n                \"as_of_date\": \"2019-10-01\",\n                \"valid_until_date\": \"2019-12-01\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"ISSUERID\",\n            \"data_values\": [\n              {\n                \"value\": \"IID000000002745031\",\n                \"as_of_date\": \"2019-10-01\",\n                \"valid_until_date\": \"2019-12-01\"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n-------------------------------------------------------\n\n[[matrix_by_factor_layout]*matrix_by_factor layout*\n\n*Input*\n----------------------\n{\n\t\"issuer_identifier_list\": [\n\t\t\"IID000000002745031\"\n\t],\n\t\"factor_name_list\": [\n        \"ESG_RATING\",\n        \"ISSUER_NAME\",\n        \"ISSUER_ISIN\",\n        \"ISSUER_SEDOL\",\n        \"ISSUERID\"\n\t],\n\n\t\"start_date\": \"2019-10-01\",\n\t\"end_date\": \"2019-11-01\",\n\t\"data_layout\": \"matrix_by_factor\",\n\t\"data_sample_frequency\": \"daily\",\n\t\"inherit_missing_values\": true\n}\n----------------------\n\n*Output*\n\n----------------------\n{\n  \"status\": \"OK\",\n  \"code\": 200,\n  \"trace_id\": \"f9bf384fed5e772c\",\n  \"timestamp\": \"2019-12-02T14:28:22Z\",\n  \"messages\": [],\n  \"result\": {\n    \"response_metadata\": {\n      \"total_number_of_instruments\": 1,\n      \"total_number_of_unresolved_identifiers\": 0,\n      \"total_number_of_batches\": 2,\n      \"current_batch\": 1,\n      \"data_request_id\": \"2-5f7c93a3-debd-48ce-a780-01c7f0f4c294-2019-12-03T14:28:18+0000\",\n      \"data_request_id_expiration_time\": \"2019-12-03T14:28:18+0000\"\n    },\n    \"data\": {\n      \"requested_ids\": [\n        \"IID000000002745031\"\n      ],\n      \"as_at_date\": \"2019-12-02\",\n      \"as_of_dates\": [\n        \"2019-10-01\",\n        \"2019-10-02\",\n        \"2019-10-03\",\n        \"2019-10-04\",\n        \"2019-10-05\",\n        \"2019-10-06\",\n        \"2019-10-07\",\n        \"2019-10-08\",\n        \"2019-10-09\",\n        \"2019-10-10\",\n        \"2019-10-11\",\n        \"2019-10-12\",\n        \"2019-10-13\",\n        \"2019-10-14\",\n        \"2019-10-15\",\n        \"2019-10-16\",\n        \"2019-10-17\",\n        \"2019-10-18\",\n        \"2019-10-19\",\n        \"2019-10-20\",\n        \"2019-10-21\",\n        \"2019-10-22\",\n        \"2019-10-23\",\n        \"2019-10-24\",\n        \"2019-10-25\",\n        \"2019-10-26\",\n        \"2019-10-27\",\n        \"2019-10-28\",\n        \"2019-10-29\",\n        \"2019-10-30\",\n        \"2019-10-31\"\n      ],\n      \"factors\": [\n        {\n          \"factor\": \"ESG_RATING\",\n          \"values\": [\n            [\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\"\n            ]\n          ]\n        },\n        {\n          \"factor\": \"ISSUER_NAME\",\n          \"values\": [\n            [\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\"\n            ]\n          ]\n        },\n        {\n          \"factor\": \"ISSUER_ISIN\",\n          \"values\": [\n            [\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\"\n            ]\n          ]\n        }\n      ]\n    }\n  }\n}\n----------------------\n"},"400":{"description":"\nA status of 400 indicates that there were problems with the request. The error response should give some indication as to the problem. The client should correct the request and resubmit."},"401":{"description":"\nA response code of 401 indicates that the there was a problem with the authentication credentials. Either the key or the secret (or both) were not recognized. The client should recheck their credentials and resubmit with correct credentials."},"403":{"description":"\nWhen a request returns with a 403 status code, it means that the credentials provided in the request are not entitled to access this endpoint. The credentials contained valid login information, but the account associated with the credentials has not been granted access to this endpoint. "},"404":{"description":"\nA status code of 404 indicates that the requested resource was not found. This could be the result of an invalid identifier or some other aspect of the request resulted in"},"500":{"description":"\nA status code of 500 indicates that the API suffered an unexpected error. There is no corrective action required by the client. If the error persists, please contact the support team."},"503":{"description":"\nA status code of 503 is an indication that the API was unable to complete the request due to a problem with a related service."}}},"post":{"summary":"(Beta Phase)","description":"The /issuers/history endpoint provides a mechanism to retrieve ESG data history for a given set of issuer identifiers. A user of the API can send in a list of issuer identifiers, a range of dates, and a collection of data factors to retrieve, and the API will return the values for each of the requested factors for the given time range. There are several options available to control how much data is returned.  \n\nThe endpoint will support requests using both GET and POST. The POST method should be the method used by most API applications since it can support a larger request size (identifiers, factor names, etc.). The GET method would typically be used for quick experimental queries. \n\nThe API accepts two types of input parameters to the request, one form of input initiates a new retrieval request, the other is used to return subsequent batches of data. The /issuers/history endpoint uses a dynamic batching scheme to return data if the results are too large to return in one request (see the section on data batching for more details on how large results are returned) \n\nThe basic request for data will include the following information:\n\n* A list of one or more identifiers. These identifiers will be used to locate companies (issuers) who have ESG Data. The identifiers can represent Bonds, Securities, or the issuers themselves.\n* A list of data factors. The factors can be the names of the factors themselves, or the request can contain category paths or product names which are used to map to data factors. Factor information is available through other API endpoints such as /metadata/factors, /parameterValues/factorCategoryPaths, and /parameterValues/factorProductNames\n* A date range. The API supports date ranges of 1 date to many dates. \n* Other parameters to fine tune the request","operationId":"post-issuers-history","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/IssuerHistoryRequest"},"example":{"issuer_identifier_list":["IID000000002157615"],"factor_name_list":["IVA_COMPANY_RATING","IVA_RATING_DATE"],"data_sample_frequency":["daily"],"start_date":"2021-09-06"}}}},"responses":{"200":{"description":"===== API Responses and Layouts \n\nAll responses from the API are returned in JSON format. All responses have a similar structure but at the core of any response is the data property. For example, all output from /issuers/history will have this basic structure: \n\n \n[source,json]\n----\n{ \n  \"status\": \"OK\", \n  \"code\": 200, \n  \"trace_id\": \"06b4f3a2d92f9d5a\", \n  \"timestamp\": \"2019-09-18T12:47:35Z\", \n  \"messages\": [], \n  \"result\": { \n    \"response_metadata\": { \n      \"total_number_of_instruments\": 1, \n      \"total_number_of_unresolved_identifiers\": 0, \n      \"total_number_of_batches\": 1, \n      \"current_batch\": 1, \n      \"data_request_id\": \"33e51f26-8c3e-4c84-ab00-2d60f945ec47\" \n    }, \n    \"data\":  <content controlled by data_layout option>\n  } \n} \n---- \n\nDifferent users have different ways that they would like to view the same data, so the API offers a data_layout option to account for this. The default data layout is the by_factor layout. This layout groups the data for each issuer in a list of factors, and within each factor, data is returned in reverse chronological order (newest to oldest). Other layouts are currently being designed, including a matrix layout which is a more condensed layout that is more suitable to use by quants and a change_ranges layout which would only return changed data points for the given time-period with information about when the data was valid.\n\n====== Standard Base Response\n\n\nThe API treats historical data as a continuous stream of values for the date range specified in the call. The user can choose how often they would like to sample the stream of data. Perhaps the client only cares about what the value is at the end of each month, for example. The following options are available for the Data Sample Frequency parameter:\n|====================\n|Property |Description\n|status|HTTP Status Code (string)\n|code|HTTP Status Code (integer)\n|trace_id|Trace ID for the request (string)\n|timestamp|ISO 8601 Date Format representing the time the response was generated (string) \n|messages|Array of informational strings relating to any warnings or other non-error issues \n|result|A JSON object containing the result (Result Object)\n|====================\n\n\n===== Result Object \n\nThe Result Object is a bundle of information containing the result and consists of the following properties: \n|================\n|Property|Description \n|response_meta_data|Meta data about the response (Response Meta Data) \n|data|Exact content changes based on the desired layout. The default layout for data is an array of Issuer Response objects \n|================\n \n\n===== Response Meta Data Object \n\nThe Response Meta Data object contains details about the request, including information on number of instruments requested, number of batches that can be returned, etc. The available properties are:  \n|================\n|Property|Description \n|total_number_of_instruments |Total number of instruments returned \n|total_number_of_unresolved_identifiers|Total number of identifiers that were not able to be resolved , An identifier is only unresolved if it did not exist at all during the specified time range \n|total_number_of_batches|Total number of result batches \n|current_batch |The index of the current batch \n|data_request_id |The id representing this request. It can be used in future requests to retrieve subsequent batches of data. \n|unresolved_identifiers |A list of Unresolved Identifier objects \n|unresolved_factors |A list of Unresolved Factor objects \n|================\n\n\n===== Unresolved Identifier Object \nThe Unresolved Identifier object is used to hold information about identifiers that were passed as parameters but were unable to be resolved for some reason and therefore data will not be returned. The available properties are: \n|================\n|Property|Description \n|identifier |The identifier as entered by the user \n|reason |A short string identifying why the identifier was not matched \n|================ \n\n\n===== Unresolved Factor Object \n\nThe Unresolved Factor object is used to hold information about factors that were passed as parameters but were not valid for some reason. The available properties are: \n|================\n|Property|Description  \n|factor name |The factor name as entered by the user \n|reason |A short string identifying why the identifier was not matched \n|================\n\n \n===== Data Layout Definitions  \n\nAs indicated previously, the history endpoint can represent the response using different layouts designed to suit different client needs. \n\n\n===== by_factor Layout \n\nThe default Issuer Response object uses the by_factor layout. This organizes data into groups of factors for each requested identifier, where each factor will contain a set of data samples based on the sample frequency specified by the user. The object is keyed by the identifier given by the user in their input, but the data is the data for the issuer to which the identifier was resolved.  \n|================\n|Property|Description \n|requested_id |The requested ID of the issuer. This will be the id that the client used to identify the issuer and may be an instrument id, bond id, ticker, isin, etc. This id is not necessarily the ID of the issuer. If an instrument ID is given, perhaps a CUSIP, the id value will be the CUSIP requested by the user, the CUSIP (if it exists at all) for the issuer may be different \n|issuer_metadata |Array of Issuer Metadata objects \n|factors |Array of Factor Data objects \n|================\n\n\n===== Issuer Metadata Object\n\nThe Issuer Metadata object contains basic details about the issuer such as the issuer name and other identifiers that may be useful.  \n\nTo handle the possibility that issuer metadata may have changed over the course of the given date range, the object includes an as_of_date and a valid_until_date to identify the date range for which the metadata is valid. For example, a company name may have changed and for part of the date range the company was named  and for another part it was named . The metadata will capture this information and indicate the range of dates for which the metadata is valid.  \n\nFor most results we expect there would only be one Issuer Metadata object. If there is only one metadata object, the as_of_date value would be the start of the specified date range, and the valid_until_date value would be the last date in the specified range.  \n\nNote that the metadata names are all upper case. This is because these are the names defined in the ESG Factor Metadata and we want to be consistent with our factor naming. \n |================\n|Property|Description  \n|ISSUER_NAME |The issuer name \n|ISSUER_ISIN |Issuer isin \n|ISSUER_LEI |Issuer lei \n|ISSUER_TICKER |Issuer ticker \n|CIK_NUM |Issuer CIK Number \n|ISSUERID |MSCI Issuer Id \n|as_of_date |Date for which the data is initially valid \n|valid_until_date |Last date for which data is valid \n|================\n \n===== Factor Data Object \n\nThe Factor Data object contains information for a requested data factor. The object is identified by its name and will contain an array of one or more Factor Data Value objects which contain the results for a specific date or timeframe. \n|================\n|Property|Description \n|name |The name of the factor. The name will be the column header defined in the ESG Factor Metadata \n|data_values |Array of Factor Data Value objects \n|================\n \n===== Factor Data Value Object \n\nThe Factor Data Value object contains the value for a single data factor for a single point in time or date range.  \n\nWhen a request is made, the client can specify a data sample frequency. For each date in the specified sample frequency a Factor Data Value object will exist containing the value for the given date, an as_of_date value indicating the date of the data sample, and an as_at date, which is the value the client will have passed in on the request.  \n\nFor example, if the client requests sampling on business_month_end dates, for the past 12 months, the result would contain 12 Factor Data Value factors for each requested data factor. The as_of_date in each object would be the appropriate business month end date. In all cases, the as_at_date will be the value passed in by the client in the request. \n\nIn the first version of the API, this by_factor layout will require the business_month_end data sample frequency. In the future we expect to expand this format to other sampling frequency values.   |================\n|Property|Description  \n|value|The value for the factor \n|as_of_date |The as_of_date for the factor \n|as_at_date |The as_at date used to determine the value \n|================\n\n*See <<by_factor_layout>> for full example*\n\n====== change_ranges Layout \n\nThe change_ranges layout is very similar to the standard by_factor layout. The only difference is in the way the data values are represented. In the by_factor layout, we represent each value as a single point in time, this is why the data value only has as_of_date and as_at_date properties for dates. The user has requested a value for a specific point in time.  \n\n\nThe change_ranges layout is used when the client only cares about the unique values for a data factor over a specified time range. If the user requests the ESG Rating for Microsoft for the past year, they might only care to see how the rating changed over the time-period. The client might not want to see 12 A values, for example. \n\n\nAs mentioned, the data structure for the change_ranges layout is virtually identical to by_factor. Instead of using the Factor Data Value object in the Factor Data Object, a Factor Data Change Value Object will be used. \n\n====== Factor Data Change Value Object \n\nThe Factor Data Change Value object contains the value for a single data factor for a specific validity range. The object has properties to indicate the as_of_date when the factor value should be considered value, and a valid_until_date which represents the date that the value changed to a new value.  \n\nUnlike the by_factor layout, the change_ranges layout does not support a data_sample_frequency value. For this layout, there is no concept of data sampling, the data output just represents all the changes that exist within the time range specified in the request. A request for 12 months of data could result in 1 or more data values, depending on how many times the value of the factor changed in the time-period.  \n|================\n|Property|Description \n|value |The value for the factor \n|as_of_date |The as_of_date for the factor \n|valid_until_date |The date a new value took effect. The value should be considered valid up until this date. \n|as_at_date |The as_at date used to determine the value \n|================\n \n\nSee <<change_ranges_layout>> for full example\n\n====== matrix_by_factor Layout \n\nThe currently proposed output of the matrix_by_factor layout would take the following form: \n\nAs with the by_factor layout, the matrix_by_factor layout would be contained within the standard response JSON structure described earlier: \n|================\n|Property|Description \n|status |Http Status Code (string) \n|code |Http Status Code (integer) \n|trace_id |Trace id for the request (string) \n|timestamp |ISO 8601 Date Format representing the time the response was generated (string) \n|messages |Array of informational strings relating to any warnings or other non-error issues \n|result |A JSON object containing the result (Result Object) \n|================ \n\n===== Result Object \n\nThe Result Object of a matrix_by_layout data layout has a change with the content of the data property. Instead of being an array of Issuer Response objects, the data object simply contains a single JSON object with three properties which represent the matrix of information to be returned: \n|================\n|Property|Description \n|response_meta_data |Meta data about the response (Response Meta Data) \n|data |A single instance of a Matrix Data Object \n|================\n\n \n===== Matrix Data Object \n\nThe Matrix Data Object is a JSON object with the following structure and content: \n|================\n|Property|Description \n|requested_ids |An array of strings containing the issuer identifiers given in the request. If 10 identifiers are given, the array will contain 10 values \n|dates |An array of dates which encompass the specified date range and data sample frequency in YYYY-MM-DD format. The dates will be in chronological order from oldest to newest. \n|factors |An array containing one or more Matrix Factor objects \n|================\n\n\n===== Matrix Factor Object \n\nThe Matrix Factor Object contains all the values for all of the dates and issuers for a single data factor. It has the following properties: \n|================\n|Property|Description \n|factor|The name of the data factor \n|values|This is an array of arrays of data values. The outermost array contains data values for each of the requested ids. The inner array represents all the data values for the given factor for the requested dates \n|================  \n\n\nSee <<matrix_by_factor_layout>> for full example\n\n===== *Sample Outputs*\n\n[[by_factor_layout]]*by_factor layout:*\n\n*Input*\n\n----------\n{\n\t\"issuer_identifier_list\": [\n\t\t\"IID000000002745031\"\n\t],\n\t\"factor_name_list\": [\n        \"ESG_RATING\",\n        \"ISSUER_NAME\",\n        \"ISSUER_ISIN\",\n        \"ISSUER_SEDOL\",\n        \"ISSUERID\"\n\t],\n\n\t\"start_date\": \"2019-09-01\",\n\t\"end_date\": \"2019-12-01\",\n\t\"data_layout\": \"by_factor\",\n\t\"data_sample_frequency\": \"business_month_end\",\n\t\"inherit_missing_values\": true\n}\n----------\n\n*Output*\n-------------------------------------------------------\n{\n  \"status\": \"OK\",\n  \"code\": 200,\n  \"trace_id\": \"158760f24d9cd939\",\n  \"timestamp\": \"2019-12-02T14:22:41Z\",\n  \"messages\": [],\n  \"result\": {\n    \"response_metadata\": {\n      \"total_number_of_instruments\": 1,\n      \"total_number_of_unresolved_identifiers\": 0,\n      \"total_number_of_batches\": 1,\n      \"current_batch\": 1,\n      \"data_request_id\": \"0-e4891be4-af17-4c43-980e-c524fc4a8350-2019-12-03T14:22:08+0000\",\n      \"data_request_id_expiration_time\": \"2019-12-03T14:22:08+0000\"\n    },\n    \"data\": [\n      {\n        \"requested_id\": \"IID000000002745031\",\n        \"issuer_metadata\": [\n          {\n            \"ISSUERID\": \"IID000000002745031\",\n            \"ISSUER_NAME\": \"ALPHABET INC.\",\n            \"CIK_NUM\": \"0001652044\",\n            \"ISSUER_ISIN\": \"US02079K1079\",\n            \"ISSUER_TICKER\": \"GOOGL\",\n            \"as_of_date\": \"2019-09-30\",\n            \"valid_until_date\": \"2019-10-01\"\n          }\n        ],\n        \"factors\": [\n          {\n            \"name\": \"ESG_RATING\",\n            \"data_values\": [\n              {\n                \"value\": \"AA\",\n                \"as_of_date\": \"2019-09-30\",\n                \"as_at_date\": \"2019-12-02\"\n              },\n              {\n                \"value\": \"AA\",\n                \"as_of_date\": \"2019-10-31\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"ISSUER_NAME\",\n            \"data_values\": [\n              {\n                \"value\": \"ALPHABET INC.\",\n                \"as_of_date\": \"2019-09-30\",\n                \"as_at_date\": \"2019-12-02\"\n              },\n              {\n                \"value\": \"ALPHABET INC.\",\n                \"as_of_date\": \"2019-10-31\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"ISSUER_ISIN\",\n            \"data_values\": [\n              {\n                \"value\": \"US02079K1079\",\n                \"as_of_date\": \"2019-09-30\",\n                \"as_at_date\": \"2019-12-02\"\n              },\n              {\n                \"value\": \"US02079K1079\",\n                \"as_of_date\": \"2019-10-31\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"ISSUER_SEDOL\",\n            \"data_values\": [\n              {\n                \"value\": \"BYY88Y7\",\n                \"as_of_date\": \"2019-09-30\",\n                \"as_at_date\": \"2019-12-02\"\n              },\n              {\n                \"value\": \"BYY88Y7\",\n                \"as_of_date\": \"2019-10-31\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"ISSUERID\",\n            \"data_values\": [\n              {\n                \"value\": \"IID000000002745031\",\n                \"as_of_date\": \"2019-09-01\"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n-------------------------------------------------------\n\n[[change_ranges_layout]*change_ranges layout:*\n\n*Input*\n---------------------\n{\n\t\"issuer_identifier_list\": [\n\t\t\"IID000000002745031\"\n\t],\n\t\"factor_name_list\": [\n        \"ESG_RATING\",\n        \"ISSUER_NAME\",\n        \"ISSUER_ISIN\",\n        \"ISSUER_SEDOL\",\n        \"ISSUERID\"\n\t],\n\n\t\"start_date\": \"2019-10-01\",\n\t\"end_date\": \"2019-12-01\",\n\t\"data_layout\": \"change_ranges\",\n\t\"inherit_missing_values\": true\n}\n---------------------\n\n*Output*\n-------------------------------------------------------\n{\n  \"status\": \"OK\",\n  \"code\": 200,\n  \"trace_id\": \"e8d5a08ec990f91d\",\n  \"timestamp\": \"2019-12-02T14:33:42Z\",\n  \"messages\": [],\n  \"result\": {\n    \"response_metadata\": {\n      \"total_number_of_instruments\": 1,\n      \"total_number_of_unresolved_identifiers\": 0,\n      \"total_number_of_batches\": 1,\n      \"current_batch\": 1,\n      \"data_request_id\": \"1-938891fb-4e5a-4f37-9943-8908380d328b-2019-12-03T14:33:42+0000\",\n      \"data_request_id_expiration_time\": \"2019-12-03T14:33:42+0000\"\n    },\n    \"data\": [\n      {\n        \"requested_id\": \"IID000000002745031\",\n        \"issuer_metadata\": [\n          {\n            \"ISSUERID\": \"IID000000002745031\",\n            \"ISSUER_NAME\": \"ALPHABET INC.\",\n            \"CIK_NUM\": \"0001652044\",\n            \"ISSUER_ISIN\": \"US02079K1079\",\n            \"ISSUER_TICKER\": \"GOOGL\",\n            \"as_of_date\": \"2019-10-01\",\n            \"valid_until_date\": \"2019-12-01\"\n          }\n        ],\n        \"factors\": [\n          {\n            \"name\": \"ESG_RATING\",\n            \"data_values\": [\n              {\n                \"value\": \"AA\",\n                \"as_of_date\": \"2019-10-01\",\n                \"valid_until_date\": \"2019-12-01\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"ISSUER_NAME\",\n            \"data_values\": [\n              {\n                \"value\": \"ALPHABET INC.\",\n                \"as_of_date\": \"2019-10-01\",\n                \"valid_until_date\": \"2019-12-01\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"ISSUER_ISIN\",\n            \"data_values\": [\n              {\n                \"value\": \"US02079K1079\",\n                \"as_of_date\": \"2019-10-01\",\n                \"valid_until_date\": \"2019-12-01\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"ISSUER_SEDOL\",\n            \"data_values\": [\n              {\n                \"value\": \"BYY88Y7\",\n                \"as_of_date\": \"2019-10-01\",\n                \"valid_until_date\": \"2019-12-01\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"ISSUERID\",\n            \"data_values\": [\n              {\n                \"value\": \"IID000000002745031\",\n                \"as_of_date\": \"2019-10-01\",\n                \"valid_until_date\": \"2019-12-01\"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n-------------------------------------------------------\n\n[[matrix_by_factor_layout]*matrix_by_factor layout*\n\n*Input*\n----------------------\n{\n\t\"issuer_identifier_list\": [\n\t\t\"IID000000002745031\"\n\t],\n\t\"factor_name_list\": [\n        \"ESG_RATING\",\n        \"ISSUER_NAME\",\n        \"ISSUER_ISIN\",\n        \"ISSUER_SEDOL\",\n        \"ISSUERID\"\n\t],\n\n\t\"start_date\": \"2019-10-01\",\n\t\"end_date\": \"2019-11-01\",\n\t\"data_layout\": \"matrix_by_factor\",\n\t\"data_sample_frequency\": \"daily\",\n\t\"inherit_missing_values\": true\n}\n----------------------\n\n*Output*\n\n----------------------\n{\n  \"status\": \"OK\",\n  \"code\": 200,\n  \"trace_id\": \"f9bf384fed5e772c\",\n  \"timestamp\": \"2019-12-02T14:28:22Z\",\n  \"messages\": [],\n  \"result\": {\n    \"response_metadata\": {\n      \"total_number_of_instruments\": 1,\n      \"total_number_of_unresolved_identifiers\": 0,\n      \"total_number_of_batches\": 2,\n      \"current_batch\": 1,\n      \"data_request_id\": \"2-5f7c93a3-debd-48ce-a780-01c7f0f4c294-2019-12-03T14:28:18+0000\",\n      \"data_request_id_expiration_time\": \"2019-12-03T14:28:18+0000\"\n    },\n    \"data\": {\n      \"requested_ids\": [\n        \"IID000000002745031\"\n      ],\n      \"as_at_date\": \"2019-12-02\",\n      \"as_of_dates\": [\n        \"2019-10-01\",\n        \"2019-10-02\",\n        \"2019-10-03\",\n        \"2019-10-04\",\n        \"2019-10-05\",\n        \"2019-10-06\",\n        \"2019-10-07\",\n        \"2019-10-08\",\n        \"2019-10-09\",\n        \"2019-10-10\",\n        \"2019-10-11\",\n        \"2019-10-12\",\n        \"2019-10-13\",\n        \"2019-10-14\",\n        \"2019-10-15\",\n        \"2019-10-16\",\n        \"2019-10-17\",\n        \"2019-10-18\",\n        \"2019-10-19\",\n        \"2019-10-20\",\n        \"2019-10-21\",\n        \"2019-10-22\",\n        \"2019-10-23\",\n        \"2019-10-24\",\n        \"2019-10-25\",\n        \"2019-10-26\",\n        \"2019-10-27\",\n        \"2019-10-28\",\n        \"2019-10-29\",\n        \"2019-10-30\",\n        \"2019-10-31\"\n      ],\n      \"factors\": [\n        {\n          \"factor\": \"ESG_RATING\",\n          \"values\": [\n            [\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\"\n            ]\n          ]\n        },\n        {\n          \"factor\": \"ISSUER_NAME\",\n          \"values\": [\n            [\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\"\n            ]\n          ]\n        },\n        {\n          \"factor\": \"ISSUER_ISIN\",\n          \"values\": [\n            [\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\"\n            ]\n          ]\n        }\n      ]\n    }\n  }\n}\n----------------------\n"},"400":{"description":"\nA status of 400 indicates that there were problems with the request. The error response should give some indication as to the problem. The client should correct the request and resubmit."},"401":{"description":"\nA response code of 401 indicates that the there was a problem with the authentication credentials. Either the key or the secret (or both) were not recognized. The client should recheck their credentials and resubmit with correct credentials."},"403":{"description":"\nWhen a request returns with a 403 status code, it means that the credentials provided in the request are not entitled to access this endpoint. The credentials contained valid login information, but the account associated with the credentials has not been granted access to this endpoint. "},"404":{"description":"\nA status code of 404 indicates that the requested resource was not found. This could be the result of an invalid identifier or some other aspect of the request resulted in"},"500":{"description":"\nA status code of 500 indicates that the API suffered an unexpected error. There is no corrective action required by the client. If the error persists, please contact the support team."},"503":{"description":"\nA status code of 503 is an indication that the API was unable to complete the request due to a problem with a related service."}}}},"/parameterValues/fundAssetClasses":{"get":{"summary":"/parameterValues/fundAssetClasses - GET","description":"This endpoint is used to retrieve a list of fund asset class names. The names can be used in the *fund_asset_class_list* parameter of the *funds* endpoint to restrict results to funds that belong to the specified fund asset class names.","operationId":"get-parametervalues-fundassetclasses","responses":{"200":{"description":"Success","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultObject"},"examples":{"default":{"value":null}}}}},"401":{"description":"Unauthorized"},"403":{"description":"No subscription available for this data"},"500":{"description":"Unexpected Server Error"},"503":{"description":"Service Unavailable"}}}},"/parameterValues/fundAssetUniverses":{"get":{"summary":"/parameterValues/fundAssetUniverses - GET","description":"This endpoint is used to retrieve a list of fund asset universe names. The names can be used in the *fund_asset_universe_list* parameter of the *funds* endpoint to restrict results to funds that belong to the specified fund asset universe names.","operationId":"get-parametervalues-fundassetuniverses","responses":{"200":{"description":"Success","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultObject"},"examples":{"default":{"value":null}}}}},"401":{"description":"Unauthorized"},"403":{"description":"No subscription available for this data"},"500":{"description":"Unexpected Server Error"},"503":{"description":"Service Unavailable"}}}},"/parameterValues/gicsSubIndustries":{"get":{"summary":"/parameterValues/gicsSubIndustries - GET","description":"This endpoint is used to retrieve a list of GICS SubIndustry names and codes. The codes can be used in other endpoints that allow for the specification of GICS SubIndustry ids.","operationId":"get-parametervalues-gicssubindustries","responses":{"200":{"description":"This endpoint returns a list of GICS SubIndustry names and codes. The code can be used as input to the issuers endpoint to restrict issuers to those that belong to the specified industries.","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultObject"},"examples":{"default":{"value":null}}}}},"401":{"description":"Unauthorized"},"403":{"description":"No subscription available for this data"},"500":{"description":"Unexpected Server Error"},"503":{"description":"Service Unavailable"}}}},"/parameterValues/factorProductNames":{"get":{"summary":"/parameterValues/factorProductNames - GET","description":"ESG Data Factors are grouped into product categories. This request is used to provide a list of products to which the client has been granted access. The product names can be used in other queries to retrieve a list of factors relating to the specified product(s).","operationId":"get-parametervalues-factorproductnames","parameters":[{"name":"contains","in":"query","description":"The contains parameter is used to limit the response to those product names that contain the given string. This parameter can be combined with the starts_with parameter.","schema":{"type":"string","x-Position":0,"x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null}},{"name":"starts_with","in":"query","description":"The starts_with parameter is used to limit the response to those product names that start with the given string.This parameter can be combined with the contains parameter.","schema":{"type":"string","x-Position":0,"x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null}},{"name":"factor_type","in":"query","description":"The factor_type value is an optional parameter which restricts the category paths to those that contain a particular factor type. For example, if the factor_type specified is *issuer*, only category paths that contain issuer factors will be returned. Note that the available factor types is determined by user permissions.","schema":{"type":"string","default":"all","x-Position":0,"x-AcceptedValue":"fund,issuer,all","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null}}],"responses":{"200":{"description":"This endpoint returns a list of product names that have been defined to group factors together. The list of products returned is based on permissions granted to the account associated with the request. These names can be used as input to either the issuers or the factors endpoints as a way to restricted the returned content to factors found in the specified products."},"400":{"description":"Bad Request"},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not found"},"500":{"description":"Internal Server Error"}}}},"/parameterValues/fundDomiciles":{"get":{"summary":"/parameterValues/fundDomiciles - GET","description":"This endpoint is used to retrieve a list of fund domicile names. The names can be used in the *fund_domicile_list* parameter of the *funds* endpoint to restrict results to funds that belong to the specified fund domicile names.","operationId":"get-parametervalues-funddomiciles","responses":{"200":{"description":"Success","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultObject"},"examples":{"default":{"value":null}}}}},"401":{"description":"Unauthorized"},"403":{"description":"No subscription available for this data"},"500":{"description":"Unexpected Server Error"},"503":{"description":"Service Unavailable"}}}},"/parameterValues/fundLipperGlobalClasses":{"get":{"summary":"/parameterValues/fundLipperGlobalClasses - GET","description":"This endpoint is used to retrieve a list of Lipper global class names. The names can be used in the *fund_lipper_global_class_list* parameter of the *funds* endpoint to restrict results to funds that belong to the specified Lipper global class names.","operationId":"get-parametervalues-fundlipperglobalclasses","responses":{"200":{"description":"Success","content":{"*/*":{"schema":{"$ref":"#/components/schemas/ResultObject"},"examples":{"default":{"value":null}}}}},"401":{"description":"Unauthorized"},"403":{"description":"No subscription available for this data"},"500":{"description":"Unexpected Server Error"},"503":{"description":"Service Unavailable"}}}},"/parameterValues/coverages":{"get":{"summary":"/parameterValues/coverages - GET","description":"ESG Data is collected for a large number of issuers. In most cases, clients will want to limit the number of issuers they get in a response to only those who have data for a particular coverage universe. For example, a client may wish to only get issues that have ESG Ratings data. The coverage universe is a way to limit the response to issuers that meet particular data characteristics. This endpoint will return a list of data coverage names that are available to the caller.","operationId":"get-parametervalues-coverages","responses":{"200":{"description":"The result of this endpoint is a JSON response containing a list of available data coverage names. A name from this list can be used in a /issuers query to limit the responses to issuers from the specified coverage universe."},"400":{"description":"Bad Request"},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not found"},"500":{"description":"Internal Server Error"}}}},"/metadata/factors":{"get":{"summary":"/metadata/factors - GET","description":"This endpoint is used to retrieve information about the factor data that is available to the client. A request can filter results based on category paths, product names, and factor type (issuer or fund factors). This information can be used to formulate calls to the issuers end point which accepts category paths, product names, and factor IDs as query parameters.","operationId":"get-metadata-factors","parameters":[{"name":"factor_name_list","in":"query","description":"A caller can specify one or more factor names for which they want to retrieve factor metadata. Data will be returned for all valid factor names, along with a list of any factor names which weren't recognized. If a name isn't recognized, it could be the factor doesn't exist, or the caller doesn't have access to that factor.","schema":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":0,"x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null}},{"name":"factor_type","in":"query","description":"Factor Type is an optional value which will restrict the return factors to the specified type. If this option is not specified, all factor types will be returned. Available options are issuer, fund, and all. Note the options that are available are based on user permissions. Some users may only be allowed to use fund or all, other users may only be able to use issuers or all.","schema":{"type":"string","default":"all","x-Position":0,"x-AcceptedValue":"fund, issuer, all","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null}},{"name":"product_name_list","in":"query","description":"ESG Data Factors are grouped into various product classifications. A user can specify a list of product names to limit the factors that are returned for this query.","schema":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":0,"x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":"Product Names is a collection of one or more factor product name definitions. All factors contained in this product name(s) will be returned."}},{"name":"category_path_list","in":"query","description":"ESG Data Factors are organized into a hierarchy of categories. Category Paths are used to located a group of factors that belong to the specified path(s).","schema":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":0,"x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":"Category Paths is a collection of one or more factor category path definitions. All factors contained in the specified category path(s) will be returned."}}],"responses":{"200":{"description":"The factors endpoint is used to return metadata related to the data factors that can be returned in a data request made via the issuers endpoint. The metadata includes the name of the factor, the data type, a minimum/maximum value if appropriate, as well as other basic factor information."},"401":{"description":"Unauthorized"},"403":{"description":"No subscription available for this data"},"500":{"description":"Unexpected Server Error"},"503":{"description":"Service Unavailable"}}}},"/funds":{"get":{"summary":"/funds - GET","description":"This endpoint is used to retrieve a set of funds, containing factor data for each fund, based on the parameters given in the request. The results are governed by the data points and fund coverage permissioned to the account. This request allows the caller to specify which data they want to retrieve, and from which 'universe' of funds the results should come from. For example, a request could ask for all *Fund Metrics:Summary* category data for funds in the Equity fund asset class. The result would be a JSON object with a list of funds along with the requested data. The query would look like this:\n\n.....\nhttps://api.msci.com/esg/data/v1.0/funds?category_path_list=Fund Metrics:Summary&fund_asset_class_list=Equity\n.....","operationId":"get-funds","parameters":[{"name":"format","in":"query","description":"The result of the issuers endpoint will be returned in JSON format by default. However, the result can also be returned as a CSV file, which can then be imported directly into application such as Excel. The CSV format consists of a header row identifying each column, followed by one or more rows of data. XML can also be specified and the result will be a properly formatted XML document without a DTD or schema.","schema":{"type":"string","default":"json","x-Position":0,"x-AcceptedValue":"json, csv, xml","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null},"example":"json"},{"name":"offset","in":"query","description":"Format - int32. The Data API has the potential to generate large amounts of data. If a query will result in extra large amounts of data, the user will be required to specify paging parameters. The offset value  indicates which record to start retrieving values. This option is usually paired with the limit parameter to create a window of results to return. When paging is using, an additional section of the JSON response will contain information about the total number of records that could be returned, along with links for the next,prev,first,last pages where appropriate. If you are on the last page, no *next* link will be generated, for example.","schema":{"type":"integer","format":"int32","x-Position":0,"x-ValidationConstraints":"Must be greater than zero","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null}},{"name":"limit","in":"query","description":"Format - int32. The Data API has the potential to generate large amounts of data. If a query will result in extra large amounts of data, the user will be required to specify paging parameters. The limit value indicates the maximum number of records to return. This option is usually paired with the offset parameter to create a window of results to return. When paging is using, an additional section of the JSON response will contain information about the total number of records that could be returned, along with links for the next,prev,first,last pages where appropriate. If you are on the last page, no *next* link will be generated, for example.","schema":{"type":"integer","format":"int32","x-Position":0,"x-ValidationConstraints":"Must be greater than one","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null}},{"name":"product_name_list","in":"query","description":"This parameter is a list of one or more product names which contain groups of data factors. Data factors are grouped by category as well as by product name. A product name is used to identify a product to which a data factor must belong in order to be returned. The list of products available to the caller can be found via the /parameterValues/factorProductNames endpoint.","schema":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":0,"x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":"product_names"}},{"name":"category_path_list","in":"query","description":"This parameter is a list of one or more category path strings.\nA category path is used to identify a collection of data factors. All category paths available to the caller can be obtained from the /parameterValues/factorCategoryPaths endpoint.","schema":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":0,"x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":"category_paths"}},{"name":"factor_name_list","in":"query","description":"This is a list of factor names. A factor name is used to identify a unique data point value associated with an issuer. A full list of available factors for the caller can be found by using the /metadata/factors endpoint.","schema":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":0,"x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":"factor_names"}},{"name":"fund_metrics_coverage_only","in":"query","description":"The 'fund_metrics_coverage_only' flag is supposed to limit results to funds in fund metrics coverage if set to true. If you want to have fund which are not part of coverage you need to add 'fund_metrics_coverage_only=false' in the API query.By default fund endpoint fund_metrics_coverage_only is set to true. By default fund endpoint fund_metrics_coverage_only is set to true. If you set it to false, it will find funds that aren't in the fund metrics universe but not include those that are in the universe.","schema":{"type":"string","x-Position":0,"x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":"flag value"}},{"name":"name_contains","in":"query","description":"The name_matches string is used to locate issuers whose primary issuer name value contains the given string anywhere in the name. If parent/child options are used, additional issuers may be returned that are related to the primary issuer, but will not necessarily match the pattern given.","schema":{"type":"string","x-Position":0,"x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null}},{"name":"starts_with","in":"query","description":"Limit the primary issuer to a name that starts with the specified value. If parent/child options are specified, there may be issuers included that don't start with the specified name.","schema":{"type":"string","x-Position":0,"x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null}},{"name":"fund_lipper_global_class_list","in":"query","description":"This parameter contains a list of one or more fund lipper global class names. The available names can be determined by first issuing a request to the */parameterValues/fundLipperGlobalClasses* endpoint. Names from that list may be used in this query to limit results to funds located in the specified Lipper global classes.","schema":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":0,"x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null}},{"name":"fund_domicile_list","in":"query","description":"This parameter contains a list of one or more fund domicile names. The available domicile names can be determined by first issuing a request to the */parameterValues/fundDomicileNames* endpoint. Names from that list may be used in this query to limit results to funds located in the specified domiciles. A Country Code is the 2 character  code representing a country.","schema":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":0,"x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":"country_codes"}},{"name":"fund_asset_universe_list","in":"query","description":"This parameter contains a list of one or more fund asset universe names. The available fund asset universe names can be determined by first issuing a request to the */parameterValues/fundAssetUniverses* endpoint. Names from that list may be used in this query to limit results to funds located in the specified fund asset universes. A GICS SubIndustry code is a string value which is used to identify a particular GICS SubIndustry. A full list of GICS SubIndustries is available from the /parameterValues/gicsSubIndustries endpoint.","schema":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":0,"x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":"gics_subindustry_ids"}},{"name":"fund_asset_class_list","in":"query","description":"This parameter contains a list of one or more fund asset class names. The available fund asset class names can be determined by first issuing a request to the */parameterValues/fundAssetClasses* endpoint. Names from that list may be used in this query to limit results to funds located in the specified fund asset classes. The ESG Industry ID is a string value that identifies an ESG Industry. A full list of available ESG Industries can be retrieved from the /parameterValues/esgIndustries endpoint","schema":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":0,"x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":"esg_industry_ids"}},{"name":"fund_identifier_type","in":"query","description":"When requesting data, the client can specify a list of one or more issuer identifiers for which data will be returned. The default issuer identifier is an MSCI issuer id. However, by specifying a different lookup factor, the client can specify IDs such as ISINs. All identifiers must be of the same type, however. For example, mixing ISINs and MSCI Issuer Ids is not allowed.","schema":{"type":"string","x-Position":0,"x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":"lookup_factor"}},{"name":"fund_identifier_list","in":"query","description":"This parameter is used to limit the results to a specific set of issuers. The caller can list one or more issuer identifiers which identified the issuers for which data should be returned.\n\nThe issuer identifier is a value that is used to locate an issuer within the universe of issuers available to the client. By default, this identifier is an MSCI Issuer ID value, but this can also be a different identifier type when the issuer_identifier_type is specified. All identifiers must be of the same type.","schema":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":0,"x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":"fund_ids"}}],"responses":{"200":{"description":"The fund endpoint returns a collection of data for the fund and datapoints requested. By default, the result is returned in JSON format. The results can also be returned as a CSV file if the request uses the format parameter, or if the accept header specifies text/csv as an acceptable result."},"206":{"description":"If a request contains some minor errors in specification, for example a factor category or product name wasn't found, the request may still return results. Any issues will be identified in the 'messages' portion of the result, but the results may be incomplete based on what the client requested.\n\nFor example, suppose a request asked for the factors IVA_RATING_DATE and IVA_RATING. There is no factor named IVA_RATING. The response would return all data that could be found, but would also indicate that there was no factor named IVA_RATING. The client would have to update their query to use IVA_COMPANY_RATING instead."},"400":{"description":"Malformed request"},"401":{"description":"Unauthorized"},"403":{"description":"No subscription available for this data"},"500":{"description":"Unexpected Server Error"},"503":{"description":"Service Unavailable"}}},"post":{"summary":"/funds - POST","description":"In addition to requesting fund data via a GET request, users can also create a POST request where the POSTed data consists of the various query parameters that are available on the GET request. The POST form of this endpoint allows for potentially large amounts of data to be specified. For example, a client may have a list of issuers IDs that they wish to retrieve data for. Specifying the ids in a GET request may exceed the maximum length allowed for a GET request. A POST request has no such limit. \n\nIt is important to note that any POST request specify the Content-Type being used for submission. For example, if JSON is being used to send data, the Content-Type should be application/json, otherwise the request may be rejected with a 400 status code and an 'Invalid formatting' error message.","operationId":"post-funds","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/FundRequest"},"example":{"fund_identifier_list":[68232986],"factor_name_list":["FUND_ESG_RATING","ESG_ENVIRONMENTAL_SCORE"],"limit":10,"offset":0}}}},"responses":{"200":{"description":"The fund endpoint returns a collection of data for the fund and datapoints requested. By default, the result is returned in JSON format. The results can also be returned as a CSV file if the request uses the format parameter, or if the accept header specifies text/csv as an acceptable result."},"206":{"description":"If a request contains some minor errors in specification, for example a factor category or product name wasn't found, the request may still return results. Any issues will be identified in the 'messages' portion of the result, but the results may be incomplete based on what the client requested.\n\nFor example, suppose a request asked for the factors IVA_RATING_DATE and IVA_RATING. There is no factor named IVA_RATING. The response would return all data that could be found, but would also indicate that there was no factor named IVA_RATING. The client would have to update their query to use IVA_COMPANY_RATING instead."},"400":{"description":"Bad Request"},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not found"},"500":{"description":"Internal Server Error"}}}},"/parameterValues/factorCategoryPaths":{"get":{"summary":"/parameterValues/factorCategoryPaths - GET","description":"This endpoint is used to return a list of Category Paths which identify the functional areas for all factors available to the caller. Factors are organized by categories in a tree-like structure. Category Paths represent one way which a client can indicate which factors they would like to retrieve when getting data for a set of issuers. This call will return a JSON object containing a list of all Category Paths to which a client is permitted.  The request can contain optional parameters to limit the paths to those which start with a set of characters, or which contain a set of characters (or both).","operationId":"get-parametervalues-factorcategorypaths","parameters":[{"name":"contains","in":"query","description":"A string which will be used to match a string of characters anywhere inside of a Category Path. For example, a client might wish to see all categories that are related to 'Carbon'. If 'Carbon' is specified, all category paths containing the string 'Carbon' will be returned. Matches will be case-insensitive.","schema":{"type":"string","x-Position":0,"x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null}},{"name":"starts_with","in":"query","description":"A string which will be used to match the starting characters of a Category Path. For example, a client might wish to see all categories that are related to 'ESG Ratings'. If 'ESG Ratings' is specified, all category paths starting with 'ESG Ratings' will be returned. Matches will be case-insensitive.","schema":{"type":"string","x-Position":0,"x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null}},{"name":"factor_type","in":"query","description":"The factor_type value is an optional parameter which restricts the category paths to those that contain a particular factor type. For example, if the factor_type specified is *issuer*, only category paths that contain issuer factors will be returned. Note that the available factor types is determined by user permissions.","schema":{"type":"string","default":"all","x-Position":0,"x-AcceptedValue":"fund, issuer, all","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null}}],"responses":{"200":{"description":"This end point is used to return a list of category paths that are used to identify groups of factors. These paths can be used to define a set of factors that are desired when retrieving data from the issuers endpoint, or as input to the factor metadata endpoint."},"400":{"description":"Bad Request"},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not found"},"500":{"description":"Internal Server Error"}}}},"/healthcheck":{"get":{"summary":"/healthcheck - GET","description":"ESG Data API healthcheck URL.","operationId":"get-healthcheck","responses":{"200":{"description":"The result of this endpoint is a Plain Text response saying server up."},"400":{"description":"Bad Request"},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not found"},"500":{"description":"Internal Server Error"}}}},"/funds/history":{"get":{"summary":"(Beta Phase)","description":"The /funds/history endpoint provides a mechanism to retrieve ESG data history for a given set of fund identifiers. A user of the API can send in a list of fund identifiers, a range of dates, and a collection of data factors to retrieve, and the API will return the values for each of the requested factors for the given time range. There are several options available to control how much data is returned.  \n\nThe endpoint will support requests using both GET and POST. The POST method should be the method used by most API applications since it can support a larger request size (identifiers, factor names, etc.). The GET method would typically be used for quick experimental queries. \n\nThe API accepts two types of input parameters to the request, one form of input initiates a new retrieval request, the other is used to return subsequent batches of data. The /funds/history endpoint uses a dynamic batching scheme to return data if the results are too large to return in one request (see the section on data batching for more details on how large results are returned) \n\nThe basic request for data will include the following information:\n\n* A list of one or more identifiers. These identifiers will be used to locate companies (funds) who have ESG Data. The identifiers can represent Bonds, Securities, or the funds themselves.\n* A list of data factors. The factors can be the names of the factors themselves, or the request can contain category paths or product names which are used to map to data factors. Factor information is available through other API endpoints such as /metadata/factors, /parameterValues/factorCategoryPaths, and /parameterValues/factorProductNames\n* A date range. The API supports date ranges of 1 date to many dates. \n* Other parameters to fine tune the request","operationId":"get-funds-history-start_date-start_date-fund_identifier_list-fund_identifier","parameters":[{"name":"start_date","in":"query","description":"Format - date (as full-date in RFC3339). \nThe first date to be used for data retrieval. If only a start_date is given, only data for the specified date will be returned.","required":true,"schema":{"type":"string","format":"date","default":"json","x-Position":0,"x-AcceptedValue":"json, csv, xml","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null},"example":"json"},{"name":"fund_identifier_list","in":"query","description":"\nA list of one or more fund identifiers which resolve to funds. Identifiers can be MDSUIDS, etc","required":true,"schema":{"type":"array","items":{"type":"string","x-Position":0},"default":"json","x-Position":0,"x-AcceptedValue":"json, csv, xml","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null},"example":"json"},{"name":"format","in":"query","description":"The result of the fund history endpoint will be returned in JSON format by default. However, the result can also be returned as a CSV file, which can then be imported directly into application such as Excel. The CSV format consists of a header row identifying each column, followed by one or more rows of data. The CSV format is supported with only  data_layout parameter value \"by_factor\".","schema":{"type":"string","default":"json","x-Position":0,"x-AcceptedValue":"json, csv","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null},"example":"json"},{"name":"inherit_missing_values","in":"query","description":"\nA Boolean value used to indicate whether the API should inherit missing values from a parent fund. This option will automatically be set to true if the caller is permitted to receive inherited data. This option is not available to clients who do not have the inheritance feature associated with their account.","schema":{"type":"boolean"}},{"name":"data_layout","in":"query","description":"\nThe API offers different data layouts to suit the different ways that a client may want to process the data that they receive. The Data Layout options provide a way for the client to tailor the output to their needs\n\n|====================\n|Data Layout Name |Description\n|by_factor\n|The data results will be grouped by factor, and within each factor the values will be display in reverse chronological order \n|matrix_by_factor\n|This layout is more compressed than the standard by_factor layout and is designed to support usage by quants who will want data rows with no gaps. The exact layout of the data content is still being finalized, but it will represent the data as a 2-d matrix. This layout is compatible with both daily and business_month_end sample frequencies. \n|change_ranges\n|This layout will only show change ranges for each value returned. Ranges will start at the first date in the requested range and end on the last date. If a value for a factor was value for 3 months in the range, and then changed and was valid for the remaining months, there would be two value ranges in the result for that particular value. \n|====================","schema":{"type":"string","default":"json","x-Position":0,"x-AcceptedValue":"json, csv, xml","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null},"example":"json"},{"name":"data_sample_frequency","in":"query","description":"\nThe API treats historical data as a continuous stream of values for the date range specified in the call. The user can choose how often they would like to sample the stream of data. Perhaps the client only cares about what the value is at the end of each month, for example. The following options are available for the Data Sample Frequency parameter:\n\n|====================\n|Data Sample Name |Description\n|daily\n|A data value sample will be taken from each date in the specified range. If there are 200 days in the given range, there will be 200 samples taken from the stream of values, one for each day in the range. The daily range is currently only available when using the matrix_by_factor layout.\n|business_month_end\n|A data value sample will be taken from each business month end date in the specified range. If there are 12 months in the given range, there will be 12 samples taken from the stream of values, one for each business month end day in the range \n|====================","schema":{"type":"string","default":"json","x-Position":0,"x-AcceptedValue":"json, csv, xml","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null},"example":"json"},{"name":"as_at_date","in":"query","description":"Format - date (as full-date in RFC3339). \nA date which defines which corrections should be returned. If the as_at_date is before the end_date, the as_at_date will override the end_date. No values will be returned beyond the specified as_at_date. If no as_at_date is specified, the data will be viewed from the perspective of the date that the request was made.\n\nThe 'as at' date functions like a time machine. It allows the client to go back in time to view data from a particular point in time in the past. The values that are returned will be the values that would have been seen if a request had been made on the specified 'as at' date.","schema":{"type":"string","format":"date","default":"json","x-Position":0,"x-AcceptedValue":"json, csv, xml","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null},"example":"json"},{"name":"end_date","in":"query","description":"Format - date (as full-date in RFC3339). \nThe end date for the range of values to be returned. If not specified, the request will return a single value corresponding to the given start_date. The end_date cannot exceed the as_at_date. If the end_date is after the as_at_date, the request will be rejected with a 400 status code.","schema":{"type":"string","format":"date","default":"json","x-Position":0,"x-AcceptedValue":"json, csv, xml","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null},"example":"json"},{"name":"factor_name_list","in":"query","description":"\nA list of ESG Factor names as defined in the ESG Factor Metadata. Factor names, product names, and category paths can be mixed together, but at least one factor name, category path, or product name must be specified for a request to be valid.","schema":{"type":"array","items":{"type":"string","x-Position":0},"default":"json","x-Position":0,"x-AcceptedValue":"json, csv, xml","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null},"example":"json"},{"name":"product_name_list","in":"query","description":"\nA list of factor product names as defined in the ESG Factor Metadata. The factor product name determines a set of data factors to retrieve. This has the same functionality as the current day endpoint. Product names, category paths, and factor names can be mixed together, but at least one factor name, category path, or product name must be specified for a request to be valid.","schema":{"type":"array","items":{"type":"string","x-Position":0},"default":"json","x-Position":0,"x-AcceptedValue":"json, csv, xml","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null},"example":"json"},{"name":"category_path_list","in":"query","description":"\nA list of factor category paths as defined in the ESG Factor Metadata. The factor category path determines a set of data factors to retrieve. This works the same as the current day endpoint. Category paths, product names, and factor names can be mixed together, but at least one factor name, category path, or product name must be specified for a request to be valid. ","schema":{"type":"array","items":{"type":"string","x-Position":0},"default":"json","x-Position":0,"x-AcceptedValue":"json, csv, xml","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null},"example":"json"}],"responses":{"200":{"description":"===== API Responses and Layouts \n\nAll responses from the API are returned in JSON format. All responses have a similar structure but at the core of any response is the data property. For example, all output from /funds/history will have this basic structure: \n\n \n[source,json]\n----\n{ \n  \"status\": \"OK\", \n  \"code\": 200, \n  \"trace_id\": \"06b4f3a2d92f9d5a\", \n  \"timestamp\": \"2019-09-18T12:47:35Z\", \n  \"messages\": [], \n  \"result\": { \n    \"response_metadata\": { \n      \"total_number_of_funds\": 1, \n      \"total_number_of_unresolved_identifiers\": 0, \n      \"total_number_of_batches\": 1, \n      \"current_batch\": 1, \n      \"data_request_id\": \"33e51f26-8c3e-4c84-ab00-2d60f945ec47\" \n    }, \n    \"data\":  <content controlled by data_layout option>\n  } \n} \n---- \n\nDifferent users have different ways that they would like to view the same data, so the API offers a data_layout option to account for this. The default data layout is the by_factor layout. This layout groups the data for each fund in a list of factors, and within each factor, data is returned in reverse chronological order (newest to oldest). Other layouts are currently being designed, including a matrix layout which is a more condensed layout that is more suitable to use by quants and a change_ranges layout which would only return changed data points for the given time-period with information about when the data was valid.\n\n====== Standard Base Response\n\n\nThe API treats historical data as a continuous stream of values for the date range specified in the call. The user can choose how often they would like to sample the stream of data. Perhaps the client only cares about what the value is at the end of each month, for example. The following options are available for the Data Sample Frequency parameter:\n|====================\n|Property |Description\n|status|HTTP Status Code (string)\n|code|HTTP Status Code (integer)\n|trace_id|Trace ID for the request (string)\n|timestamp|ISO 8601 Date Format representing the time the response was generated (string) \n|messages|Array of informational strings relating to any warnings or other non-error issues \n|result|A JSON object containing the result (Result Object)\n|====================\n\n\n===== Result Object \n\nThe Result Object is a bundle of information containing the result and consists of the following properties: \n|================\n|Property|Description \n|response_meta_data|Meta data about the response (Response Meta Data) \n|data|Exact content changes based on the desired layout. The default layout for data is an array of fund Response objects \n|================\n \n\n===== Response Meta Data Object \n\nThe Response Meta Data object contains details about the request, including information on number of funds requested, number of batches that can be returned, etc. The available properties are:  \n|================\n|Property|Description \n|total_number_of_funds |Total number of funds returned \n|total_number_of_unresolved_identifiers|Total number of identifiers that were not able to be resolved , An identifier is only unresolved if it did not exist at all during the specified time range \n|total_number_of_batches|Total number of result batches \n|current_batch |The index of the current batch \n|data_request_id |The id representing this request. It can be used in future requests to retrieve subsequent batches of data. \n|unresolved_identifiers |A list of Unresolved Identifier objects \n|unresolved_factors |A list of Unresolved Factor objects \n|================\n\n\n===== Unresolved Identifier Object \nThe Unresolved Identifier object is used to hold information about identifiers that were passed as parameters but were unable to be resolved for some reason and therefore data will not be returned. The available properties are: \n|================\n|Property|Description \n|identifier |The identifier as entered by the user \n|reason |A short string identifying why the identifier was not matched \n|================ \n\n\n===== Unresolved Factor Object \n\nThe Unresolved Factor object is used to hold information about factors that were passed as parameters but were not valid for some reason. The available properties are: \n|================\n|Property|Description  \n|factor name |The factor name as entered by the user \n|reason |A short string identifying why the identifier was not matched \n|================\n\n \n===== Data Layout Definitions  \n\nAs indicated previously, the history endpoint can represent the response using different layouts designed to suit different client needs. \n\n\n===== by_factor Layout \n\nThe default fund Response object uses the by_factor layout. This organizes data into groups of factors for each requested identifier, where each factor will contain a set of data samples based on the sample frequency specified by the user. The object is keyed by the identifier given by the user in their input, but the data is the data for the fund to which the identifier was resolved.  \n|================\n|Property|Description \n|requested_id |The requested ID of the fund. This will be the id that the client used to identify the fund , etc. This id is MDSUID of the fund. \n|fund_metadata |Array of fund Metadata objects \n|factors |Array of Factor Data objects \n|================\n\n\n===== fund Metadata Object\n\nThe fund Metadata object contains basic details about the fund such as the fund name and other identifiers that may be useful.  \n\nTo handle the possibility that fund metadata may have changed over the course of the given date range, the object includes an as_of_date and a valid_until_date to identify the date range for which the metadata is valid. For example, a company name may have changed and for part of the date range the company was named  and for another part it was named . The metadata will capture this information and indicate the range of dates for which the metadata is valid.  \n\nFor most results we expect there would only be one fund Metadata object. If there is only one metadata object, the as_of_date value would be the start of the specified date range, and the valid_until_date value would be the last date in the specified range.  \n\nNote that the metadata names are all upper case. This is because these are the names defined in the ESG Factor Metadata and we want to be consistent with our factor naming. \n |================\n|Property|Description  \n|FUND_NAME |The fund name \n|FUND_ADMINISTRATOR |fund admin \n|FUND_ASSET_UNIVERSE |fund asset universe \n|FUND_FILENAME |FUND_FILENAME \n|FUND_INVESTMENT_STRATEGY |FUND_INVESTMENT_STRATEGY \n|FUND_ID |MSCI fund Id \n|as_of_date |Date for which the data is initially valid \n|valid_until_date |Last date for which data is valid \n|================\n \n===== Factor Data Object \n\nThe Factor Data object contains information for a requested data factor. The object is identified by its name and will contain an array of one or more Factor Data Value objects which contain the results for a specific date or timeframe. \n|================\n|Property|Description \n|name |The name of the factor. The name will be the column header defined in the ESG Factor Metadata \n|data_values |Array of Factor Data Value objects \n|================\n \n===== Factor Data Value Object \n\nThe Factor Data Value object contains the value for a single data factor for a single point in time or date range.  \n\nWhen a request is made, the client can specify a data sample frequency. For each date in the specified sample frequency a Factor Data Value object will exist containing the value for the given date, an as_of_date value indicating the date of the data sample, and an as_at date, which is the value the client will have passed in on the request.  \n\nFor example, if the client requests sampling on business_month_end dates, for the past 12 months, the result would contain 12 Factor Data Value factors for each requested data factor. The as_of_date in each object would be the appropriate business month end date. In all cases, the as_at_date will be the value passed in by the client in the request. \n\nIn the first version of the API, this by_factor layout will require the business_month_end data sample frequency. In the future we expect to expand this format to other sampling frequency values.   |================\n|Property|Description  \n|value|The value for the factor \n|as_of_date |The as_of_date for the factor \n|as_at_date |The as_at date used to determine the value \n|================\n\n*See <<by_factor_layout>> for full example*\n\n====== change_ranges Layout \n\nThe change_ranges layout is very similar to the standard by_factor layout. The only difference is in the way the data values are represented. In the by_factor layout, we represent each value as a single point in time, this is why the data value only has as_of_date and as_at_date properties for dates. The user has requested a value for a specific point in time.  \n\n\nThe change_ranges layout is used when the client only cares about the unique values for a data factor over a specified time range. If the user requests the ESG Rating for Microsoft for the past year, they might only care to see how the rating changed over the time-period. The client might not want to see 12 A values, for example. \n\n\nAs mentioned, the data structure for the change_ranges layout is virtually identical to by_factor. Instead of using the Factor Data Value object in the Factor Data Object, a Factor Data Change Value Object will be used. \n\n====== Factor Data Change Value Object \n\nThe Factor Data Change Value object contains the value for a single data factor for a specific validity range. The object has properties to indicate the as_of_date when the factor value should be considered value, and a valid_until_date which represents the date that the value changed to a new value.  \n\nUnlike the by_factor layout, the change_ranges layout does not support a data_sample_frequency value. For this layout, there is no concept of data sampling, the data output just represents all the changes that exist within the time range specified in the request. A request for 12 months of data could result in 1 or more data values, depending on how many times the value of the factor changed in the time-period.  \n|================\n|Property|Description \n|value |The value for the factor \n|as_of_date |The as_of_date for the factor \n|valid_until_date |The date a new value took effect. The value should be considered valid up until this date. \n|as_at_date |The as_at date used to determine the value \n|================\n \n\nSee <<change_ranges_layout>> for full example\n\n====== matrix_by_factor Layout \n\nThe currently proposed output of the matrix_by_factor layout would take the following form: \n\nAs with the by_factor layout, the matrix_by_factor layout would be contained within the standard response JSON structure described earlier: \n|================\n|Property|Description \n|status |Http Status Code (string) \n|code |Http Status Code (integer) \n|trace_id |Trace id for the request (string) \n|timestamp |ISO 8601 Date Format representing the time the response was generated (string) \n|messages |Array of informational strings relating to any warnings or other non-error issues \n|result |A JSON object containing the result (Result Object) \n|================ \n\n===== Result Object \n\nThe Result Object of a matrix_by_layout data layout has a change with the content of the data property. Instead of being an array of fund Response objects, the data object simply contains a single JSON object with three properties which represent the matrix of information to be returned: \n|================\n|Property|Description \n|response_meta_data |Meta data about the response (Response Meta Data) \n|data |A single instance of a Matrix Data Object \n|================\n\n \n===== Matrix Data Object \n\nThe Matrix Data Object is a JSON object with the following structure and content: \n|================\n|Property|Description \n|requested_ids |An array of strings containing the fund identifiers given in the request. If 10 identifiers are given, the array will contain 10 values \n|dates |An array of dates which encompass the specified date range and data sample frequency in YYYY-MM-DD format. The dates will be in chronological order from oldest to newest. \n|factors |An array containing one or more Matrix Factor objects \n|================\n\n\n===== Matrix Factor Object \n\nThe Matrix Factor Object contains all the values for all of the dates and funds for a single data factor. It has the following properties: \n|================\n|Property|Description \n|factor|The name of the data factor \n|values|This is an array of arrays of data values. The outermost array contains data values for each of the requested ids. The inner array represents all the data values for the given factor for the requested dates \n|================  \n\n\nSee <<matrix_by_factor_layout>> for full example\n\n===== *Sample Outputs*\n\n[[by_factor_layout]]*by_factor layout:*\n\n*Input*\n\n----------\n{\n\t\"fund_identifier_list\": [\n\t\t\"UFD000000001285781\"\n\t],\n\t\"factor_name_list\": [\n        \"ESG_RATING\",\n        \"FUND_NAME\",\n        \"FUND_ISIN\",\n        \"FUND_SEDOL\",\n        \"FUND_ID\"\n\t],\n\n\t\"start_date\": \"2019-09-01\",\n\t\"end_date\": \"2019-12-01\",\n\t\"data_layout\": \"by_factor\",\n\t\"data_sample_frequency\": \"business_month_end\",\n\t\"inherit_missing_values\": true\n}\n----------\n\n*Output*\n-------------------------------------------------------\n{\n  \"status\": \"OK\",\n  \"code\": 200,\n  \"trace_id\": \"158760f24d9cd939\",\n  \"timestamp\": \"2019-12-02T14:22:41Z\",\n  \"messages\": [],\n  \"result\": {\n    \"response_metadata\": {\n      \"total_number_of_funds\": 1,\n      \"total_number_of_unresolved_identifiers\": 0,\n      \"total_number_of_batches\": 1,\n      \"current_batch\": 1,\n      \"data_request_id\": \"0-e4891be4-af17-4c43-980e-c524fc4a8350-2019-12-03T14:22:08+0000\",\n      \"data_request_id_expiration_time\": \"2019-12-03T14:22:08+0000\"\n    },\n    \"data\": [\n      {\n        \"requested_id\": \"UFD000000001285781\",\n        \"fund_metadata\": [\n          {\n            \"FUND_ID\": \"UFD000000001285781\",\n            \"FUND_NAME\": \"ALPHABET INC.\",\n            \"CIK_NUM\": \"0001652044\",\n            \"FUND_ISIN\": \"US02079K1079\",\n            \"FUND_TICKER\": \"GOOGL\",\n            \"as_of_date\": \"2019-09-30\",\n            \"valid_until_date\": \"2019-10-01\"\n          }\n        ],\n        \"factors\": [\n          {\n            \"name\": \"ESG_RATING\",\n            \"data_values\": [\n              {\n                \"value\": \"AA\",\n                \"as_of_date\": \"2019-09-30\",\n                \"as_at_date\": \"2019-12-02\"\n              },\n              {\n                \"value\": \"AA\",\n                \"as_of_date\": \"2019-10-31\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"FUND_NAME\",\n            \"data_values\": [\n              {\n                \"value\": \"ALPHABET INC.\",\n                \"as_of_date\": \"2019-09-30\",\n                \"as_at_date\": \"2019-12-02\"\n              },\n              {\n                \"value\": \"ALPHABET INC.\",\n                \"as_of_date\": \"2019-10-31\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"FUND_ISIN\",\n            \"data_values\": [\n              {\n                \"value\": \"US02079K1079\",\n                \"as_of_date\": \"2019-09-30\",\n                \"as_at_date\": \"2019-12-02\"\n              },\n              {\n                \"value\": \"US02079K1079\",\n                \"as_of_date\": \"2019-10-31\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"FUND_SEDOL\",\n            \"data_values\": [\n              {\n                \"value\": \"BYY88Y7\",\n                \"as_of_date\": \"2019-09-30\",\n                \"as_at_date\": \"2019-12-02\"\n              },\n              {\n                \"value\": \"BYY88Y7\",\n                \"as_of_date\": \"2019-10-31\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"FUND_ID\",\n            \"data_values\": [\n              {\n                \"value\": \"UFD000000001285781\",\n                \"as_of_date\": \"2019-09-01\"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n-------------------------------------------------------\n\n[[change_ranges_layout]*change_ranges layout:*\n\n*Input*\n---------------------\n{\n\t\"fund_identifier_list\": [\n\t\t\"UFD000000001285781\"\n\t],\n\t\"factor_name_list\": [\n        \"ESG_RATING\",\n        \"FUND_NAME\",\n        \"FUND_ISIN\",\n        \"FUND_SEDOL\",\n        \"FUND_ID\"\n\t],\n\n\t\"start_date\": \"2019-10-01\",\n\t\"end_date\": \"2019-12-01\",\n\t\"data_layout\": \"change_ranges\",\n\t\"inherit_missing_values\": true\n}\n---------------------\n\n*Output*\n-------------------------------------------------------\n{\n  \"status\": \"OK\",\n  \"code\": 200,\n  \"trace_id\": \"e8d5a08ec990f91d\",\n  \"timestamp\": \"2019-12-02T14:33:42Z\",\n  \"messages\": [],\n  \"result\": {\n    \"response_metadata\": {\n      \"total_number_of_funds\": 1,\n      \"total_number_of_unresolved_identifiers\": 0,\n      \"total_number_of_batches\": 1,\n      \"current_batch\": 1,\n      \"data_request_id\": \"1-938891fb-4e5a-4f37-9943-8908380d328b-2019-12-03T14:33:42+0000\",\n      \"data_request_id_expiration_time\": \"2019-12-03T14:33:42+0000\"\n    },\n    \"data\": [\n      {\n        \"requested_id\": \"UFD000000001285781\",\n        \"fund_metadata\": [\n          {\n            \"FUND_ID\": \"UFD000000001285781\",\n            \"FUND_NAME\": \"ALPHABET INC.\",\n            \"CIK_NUM\": \"0001652044\",\n            \"FUND_ISIN\": \"US02079K1079\",\n            \"FUND_TICKER\": \"GOOGL\",\n            \"as_of_date\": \"2019-10-01\",\n            \"valid_until_date\": \"2019-12-01\"\n          }\n        ],\n        \"factors\": [\n          {\n            \"name\": \"ESG_RATING\",\n            \"data_values\": [\n              {\n                \"value\": \"AA\",\n                \"as_of_date\": \"2019-10-01\",\n                \"valid_until_date\": \"2019-12-01\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"FUND_NAME\",\n            \"data_values\": [\n              {\n                \"value\": \"ALPHABET INC.\",\n                \"as_of_date\": \"2019-10-01\",\n                \"valid_until_date\": \"2019-12-01\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"FUND_ISIN\",\n            \"data_values\": [\n              {\n                \"value\": \"US02079K1079\",\n                \"as_of_date\": \"2019-10-01\",\n                \"valid_until_date\": \"2019-12-01\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"FUND_SEDOL\",\n            \"data_values\": [\n              {\n                \"value\": \"BYY88Y7\",\n                \"as_of_date\": \"2019-10-01\",\n                \"valid_until_date\": \"2019-12-01\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"FUND_ID\",\n            \"data_values\": [\n              {\n                \"value\": \"UFD000000001285781\",\n                \"as_of_date\": \"2019-10-01\",\n                \"valid_until_date\": \"2019-12-01\"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n-------------------------------------------------------\n\n[[matrix_by_factor_layout]*matrix_by_factor layout*\n\n*Input*\n----------------------\n{\n\t\"fund_identifier_list\": [\n\t\t\"UFD000000001285781\"\n\t],\n\t\"factor_name_list\": [\n        \"ESG_RATING\",\n        \"FUND_NAME\",\n        \"FUND_ISIN\",\n        \"FUND_SEDOL\",\n        \"FUND_ID\"\n\t],\n\n\t\"start_date\": \"2019-10-01\",\n\t\"end_date\": \"2019-11-01\",\n\t\"data_layout\": \"matrix_by_factor\",\n\t\"data_sample_frequency\": \"daily\",\n\t\"inherit_missing_values\": true\n}\n----------------------\n\n*Output*\n\n----------------------\n{\n  \"status\": \"OK\",\n  \"code\": 200,\n  \"trace_id\": \"f9bf384fed5e772c\",\n  \"timestamp\": \"2019-12-02T14:28:22Z\",\n  \"messages\": [],\n  \"result\": {\n    \"response_metadata\": {\n      \"total_number_of_funds\": 1,\n      \"total_number_of_unresolved_identifiers\": 0,\n      \"total_number_of_batches\": 2,\n      \"current_batch\": 1,\n      \"data_request_id\": \"2-5f7c93a3-debd-48ce-a780-01c7f0f4c294-2019-12-03T14:28:18+0000\",\n      \"data_request_id_expiration_time\": \"2019-12-03T14:28:18+0000\"\n    },\n    \"data\": {\n      \"requested_ids\": [\n        \"UFD000000001285781\"\n      ],\n      \"as_at_date\": \"2019-12-02\",\n      \"as_of_dates\": [\n        \"2019-10-01\",\n        \"2019-10-02\",\n        \"2019-10-03\",\n        \"2019-10-04\",\n        \"2019-10-05\",\n        \"2019-10-06\",\n        \"2019-10-07\",\n        \"2019-10-08\",\n        \"2019-10-09\",\n        \"2019-10-10\",\n        \"2019-10-11\",\n        \"2019-10-12\",\n        \"2019-10-13\",\n        \"2019-10-14\",\n        \"2019-10-15\",\n        \"2019-10-16\",\n        \"2019-10-17\",\n        \"2019-10-18\",\n        \"2019-10-19\",\n        \"2019-10-20\",\n        \"2019-10-21\",\n        \"2019-10-22\",\n        \"2019-10-23\",\n        \"2019-10-24\",\n        \"2019-10-25\",\n        \"2019-10-26\",\n        \"2019-10-27\",\n        \"2019-10-28\",\n        \"2019-10-29\",\n        \"2019-10-30\",\n        \"2019-10-31\"\n      ],\n      \"factors\": [\n        {\n          \"factor\": \"ESG_RATING\",\n          \"values\": [\n            [\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\"\n            ]\n          ]\n        },\n        {\n          \"factor\": \"FUND_NAME\",\n          \"values\": [\n            [\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\"\n            ]\n          ]\n        },\n        {\n          \"factor\": \"FUND_ISIN\",\n          \"values\": [\n            [\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\"\n            ]\n          ]\n        }\n      ]\n    }\n  }\n}\n----------------------\n"},"400":{"description":"\nA status of 400 indicates that there were problems with the request. The error response should give some indication as to the problem. The client should correct the request and resubmit."},"401":{"description":"\nA response code of 401 indicates that the there was a problem with the authentication credentials. Either the key or the secret (or both) were not recognized. The client should recheck their credentials and resubmit with correct credentials."},"403":{"description":"\nWhen a request returns with a 403 status code, it means that the credentials provided in the request are not entitled to access this endpoint. The credentials contained valid login information, but the account associated with the credentials has not been granted access to this endpoint. "},"404":{"description":"\nA status code of 404 indicates that the requested resource was not found. This could be the result of an invalid identifier or some other aspect of the request resulted in"},"500":{"description":"\nA status code of 500 indicates that the API suffered an unexpected error. There is no corrective action required by the client. If the error persists, please contact the support team."},"503":{"description":"\nA status code of 503 is an indication that the API was unable to complete the request due to a problem with a related service."}}},"post":{"summary":"(Beta Phase)","description":"The /funds/history endpoint provides a mechanism to retrieve ESG data history for a given set of fund identifiers. A user of the API can send in a list of fund identifiers, a range of dates, and a collection of data factors to retrieve, and the API will return the values for each of the requested factors for the given time range. There are several options available to control how much data is returned.  \n\nThe endpoint will support requests using both GET and POST. The POST method should be the method used by most API applications since it can support a larger request size (identifiers, factor names, etc.). The GET method would typically be used for quick experimental queries. \n\nThe API accepts two types of input parameters to the request, one form of input initiates a new retrieval request, the other is used to return subsequent batches of data. The /funds/history endpoint uses a dynamic batching scheme to return data if the results are too large to return in one request (see the section on data batching for more details on how large results are returned) \n\nThe basic request for data will include the following information:\n\n* A list of one or more identifiers. These identifiers will be used to locate companies (funds) who have ESG Data. The identifiers can represent MDSUID funds themselves.\n* A list of data factors. The factors can be the names of the factors themselves, or the request can contain category paths or product names which are used to map to data factors. Factor information is available through other API endpoints such as /metadata/factors, /parameterValues/factorCategoryPaths, and /parameterValues/factorProductNames\n* A date range. The API supports date ranges of 1 date to many dates. \n* Other parameters to fine tune the request","operationId":"post-funds-history","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/FundHistoryRequest"},"example":{"fund_identifier_list":["UFD000000001251248"],"factor_name_list":["FUND_ASSET_UNIVERSE","FUND_SEDOL"],"data_sample_frequency":"daily","start_date":"2021-09-06"}}}},"responses":{"200":{"description":"===== API Responses and Layouts \n\nAll responses from the API are returned in JSON format. All responses have a similar structure but at the core of any response is the data property. For example, all output from /funds/history will have this basic structure: \n\n \n[source,json]\n----\n{ \n  \"status\": \"OK\", \n  \"code\": 200, \n  \"trace_id\": \"06b4f3a2d92f9d5a\", \n  \"timestamp\": \"2019-09-18T12:47:35Z\", \n  \"messages\": [], \n  \"result\": { \n    \"response_metadata\": { \n      \"total_number_of_funds\": 1, \n      \"total_number_of_unresolved_identifiers\": 0, \n      \"total_number_of_batches\": 1, \n      \"current_batch\": 1, \n      \"data_request_id\": \"33e51f26-8c3e-4c84-ab00-2d60f945ec47\" \n    }, \n    \"data\":  <content controlled by data_layout option>\n  } \n} \n---- \n\nDifferent users have different ways that they would like to view the same data, so the API offers a data_layout option to account for this. The default data layout is the by_factor layout. This layout groups the data for each fund in a list of factors, and within each factor, data is returned in reverse chronological order (newest to oldest). Other layouts are currently being designed, including a matrix layout which is a more condensed layout that is more suitable to use by quants and a change_ranges layout which would only return changed data points for the given time-period with information about when the data was valid.\n\n====== Standard Base Response\n\n\nThe API treats historical data as a continuous stream of values for the date range specified in the call. The user can choose how often they would like to sample the stream of data. Perhaps the client only cares about what the value is at the end of each month, for example. The following options are available for the Data Sample Frequency parameter:\n|====================\n|Property |Description\n|status|HTTP Status Code (string)\n|code|HTTP Status Code (integer)\n|trace_id|Trace ID for the request (string)\n|timestamp|ISO 8601 Date Format representing the time the response was generated (string) \n|messages|Array of informational strings relating to any warnings or other non-error issues \n|result|A JSON object containing the result (Result Object)\n|====================\n\n\n===== Result Object \n\nThe Result Object is a bundle of information containing the result and consists of the following properties: \n|================\n|Property|Description \n|response_meta_data|Meta data about the response (Response Meta Data) \n|data|Exact content changes based on the desired layout. The default layout for data is an array of fund Response objects \n|================\n \n\n===== Response Meta Data Object \n\nThe Response Meta Data object contains details about the request, including information on number of funds requested, number of batches that can be returned, etc. The available properties are:  \n|================\n|Property|Description \n|total_number_of_funds |Total number of funds returned \n|total_number_of_unresolved_identifiers|Total number of identifiers that were not able to be resolved , An identifier is only unresolved if it did not exist at all during the specified time range \n|total_number_of_batches|Total number of result batches \n|current_batch |The index of the current batch \n|data_request_id |The id representing this request. It can be used in future requests to retrieve subsequent batches of data. \n|unresolved_identifiers |A list of Unresolved Identifier objects \n|unresolved_factors |A list of Unresolved Factor objects \n|================\n\n\n===== Unresolved Identifier Object \nThe Unresolved Identifier object is used to hold information about identifiers that were passed as parameters but were unable to be resolved for some reason and therefore data will not be returned. The available properties are: \n|================\n|Property|Description \n|identifier |The identifier as entered by the user \n|reason |A short string identifying why the identifier was not matched \n|================ \n\n\n===== Unresolved Factor Object \n\nThe Unresolved Factor object is used to hold information about factors that were passed as parameters but were not valid for some reason. The available properties are: \n|================\n|Property|Description  \n|factor name |The factor name as entered by the user \n|reason |A short string identifying why the identifier was not matched \n|================\n\n \n===== Data Layout Definitions  \n\nAs indicated previously, the history endpoint can represent the response using different layouts designed to suit different client needs. \n\n\n===== by_factor Layout \n\nThe default fund Response object uses the by_factor layout. This organizes data into groups of factors for each requested identifier, where each factor will contain a set of data samples based on the sample frequency specified by the user. The object is keyed by the identifier given by the user in their input, but the data is the data for the fund to which the identifier was resolved.  \n|================\n|Property|Description \n|requested_id |The requested ID of the fund. This will be the id that the client used to identify the fund and may be an instrument id, bond id, ticker, isin, etc. This id is not necessarily the ID of the fund. If an instrument ID is given, perhaps a CUSIP, the id value will be the CUSIP requested by the user, the CUSIP (if it exists at all) for the fund may be different \n|fund_metadata |Array of fund Metadata objects \n|factors |Array of Factor Data objects \n|================\n\n\n===== fund Metadata Object\n\nThe fund Metadata object contains basic details about the fund such as the fund name and other identifiers that may be useful.  \n\nTo handle the possibility that fund metadata may have changed over the course of the given date range, the object includes an as_of_date and a valid_until_date to identify the date range for which the metadata is valid. For example, a company name may have changed and for part of the date range the company was named  and for another part it was named . The metadata will capture this information and indicate the range of dates for which the metadata is valid.  \n\nFor most results we expect there would only be one fund Metadata object. If there is only one metadata object, the as_of_date value would be the start of the specified date range, and the valid_until_date value would be the last date in the specified range.  \n\nNote that the metadata names are all upper case. This is because these are the names defined in the ESG Factor Metadata and we want to be consistent with our factor naming. \n |================\n|Property|Description  \n|FUND_NAME |The fund name \n|FUND_ADMINISTRATOR |fund admin \n|FUND_ASSET_UNIVERSE |fund asset universe \n|FUND_FILENAME |FUND_FILENAME \n|FUND_INVESTMENT_STRATEGY |FUND_INVESTMENT_STRATEGY \n|FUND_ID |MSCI fund Id \n|as_of_date |Date for which the data is initially valid \n|valid_until_date |Last date for which data is valid \n|================\n \n===== Factor Data Object \n\nThe Factor Data object contains information for a requested data factor. The object is identified by its name and will contain an array of one or more Factor Data Value objects which contain the results for a specific date or timeframe. \n|================\n|Property|Description \n|name |The name of the factor. The name will be the column header defined in the ESG Factor Metadata \n|data_values |Array of Factor Data Value objects \n|================\n \n===== Factor Data Value Object \n\nThe Factor Data Value object contains the value for a single data factor for a single point in time or date range.  \n\nWhen a request is made, the client can specify a data sample frequency. For each date in the specified sample frequency a Factor Data Value object will exist containing the value for the given date, an as_of_date value indicating the date of the data sample, and an as_at date, which is the value the client will have passed in on the request.  \n\nFor example, if the client requests sampling on business_month_end dates, for the past 12 months, the result would contain 12 Factor Data Value factors for each requested data factor. The as_of_date in each object would be the appropriate business month end date. In all cases, the as_at_date will be the value passed in by the client in the request. \n\nIn the first version of the API, this by_factor layout will require the business_month_end data sample frequency. In the future we expect to expand this format to other sampling frequency values.   |================\n|Property|Description  \n|value|The value for the factor \n|as_of_date |The as_of_date for the factor \n|as_at_date |The as_at date used to determine the value \n|================\n\n*See <<by_factor_layout>> for full example*\n\n====== change_ranges Layout \n\nThe change_ranges layout is very similar to the standard by_factor layout. The only difference is in the way the data values are represented. In the by_factor layout, we represent each value as a single point in time, this is why the data value only has as_of_date and as_at_date properties for dates. The user has requested a value for a specific point in time.  \n\n\nThe change_ranges layout is used when the client only cares about the unique values for a data factor over a specified time range. If the user requests the ESG Rating for Microsoft for the past year, they might only care to see how the rating changed over the time-period. The client might not want to see 12 A values, for example. \n\n\nAs mentioned, the data structure for the change_ranges layout is virtually identical to by_factor. Instead of using the Factor Data Value object in the Factor Data Object, a Factor Data Change Value Object will be used. \n\n====== Factor Data Change Value Object \n\nThe Factor Data Change Value object contains the value for a single data factor for a specific validity range. The object has properties to indicate the as_of_date when the factor value should be considered value, and a valid_until_date which represents the date that the value changed to a new value.  \n\nUnlike the by_factor layout, the change_ranges layout does not support a data_sample_frequency value. For this layout, there is no concept of data sampling, the data output just represents all the changes that exist within the time range specified in the request. A request for 12 months of data could result in 1 or more data values, depending on how many times the value of the factor changed in the time-period.  \n|================\n|Property|Description \n|value |The value for the factor \n|as_of_date |The as_of_date for the factor \n|valid_until_date |The date a new value took effect. The value should be considered valid up until this date. \n|as_at_date |The as_at date used to determine the value \n|================\n \n\nSee <<change_ranges_layout>> for full example\n\n====== matrix_by_factor Layout \n\nThe currently proposed output of the matrix_by_factor layout would take the following form: \n\nAs with the by_factor layout, the matrix_by_factor layout would be contained within the standard response JSON structure described earlier: \n|================\n|Property|Description \n|status |Http Status Code (string) \n|code |Http Status Code (integer) \n|trace_id |Trace id for the request (string) \n|timestamp |ISO 8601 Date Format representing the time the response was generated (string) \n|messages |Array of informational strings relating to any warnings or other non-error issues \n|result |A JSON object containing the result (Result Object) \n|================ \n\n===== Result Object \n\nThe Result Object of a matrix_by_layout data layout has a change with the content of the data property. Instead of being an array of fund Response objects, the data object simply contains a single JSON object with three properties which represent the matrix of information to be returned: \n|================\n|Property|Description \n|response_meta_data |Meta data about the response (Response Meta Data) \n|data |A single instance of a Matrix Data Object \n|================\n\n \n===== Matrix Data Object \n\nThe Matrix Data Object is a JSON object with the following structure and content: \n|================\n|Property|Description \n|requested_ids |An array of strings containing the fund identifiers given in the request. If 10 identifiers are given, the array will contain 10 values \n|dates |An array of dates which encompass the specified date range and data sample frequency in YYYY-MM-DD format. The dates will be in chronological order from oldest to newest. \n|factors |An array containing one or more Matrix Factor objects \n|================\n\n\n===== Matrix Factor Object \n\nThe Matrix Factor Object contains all the values for all of the dates and funds for a single data factor. It has the following properties: \n|================\n|Property|Description \n|factor|The name of the data factor \n|values|This is an array of arrays of data values. The outermost array contains data values for each of the requested ids. The inner array represents all the data values for the given factor for the requested dates \n|================  \n\n\nSee <<matrix_by_factor_layout>> for full example\n\n===== *Sample Outputs*\n\n[[by_factor_layout]]*by_factor layout:*\n\n*Input*\n\n----------\n{\n\t\"fund_identifier_list\": [\n\t\t\"UFD000000001285781\"\n\t],\n\t\"factor_name_list\": [\n        \"ESG_RATING\",\n        \"FUND_NAME\",\n        \"FUND_ISIN\",\n        \"FUND_SEDOL\",\n        \"FUND_ID\"\n\t],\n\n\t\"start_date\": \"2019-09-01\",\n\t\"end_date\": \"2019-12-01\",\n\t\"data_layout\": \"by_factor\",\n\t\"data_sample_frequency\": \"business_month_end\",\n\t\"inherit_missing_values\": true\n}\n----------\n\n*Output*\n-------------------------------------------------------\n{\n  \"status\": \"OK\",\n  \"code\": 200,\n  \"trace_id\": \"158760f24d9cd939\",\n  \"timestamp\": \"2019-12-02T14:22:41Z\",\n  \"messages\": [],\n  \"result\": {\n    \"response_metadata\": {\n      \"total_number_of_funds\": 1,\n      \"total_number_of_unresolved_identifiers\": 0,\n      \"total_number_of_batches\": 1,\n      \"current_batch\": 1,\n      \"data_request_id\": \"0-e4891be4-af17-4c43-980e-c524fc4a8350-2019-12-03T14:22:08+0000\",\n      \"data_request_id_expiration_time\": \"2019-12-03T14:22:08+0000\"\n    },\n    \"data\": [\n      {\n        \"requested_id\": \"UFD000000001285781\",\n        \"fund_metadata\": [\n          {\n            \"FUND_ID\": \"UFD000000001285781\",\n            \"FUND_NAME\": \"ALPHABET INC.\",\n            \"CIK_NUM\": \"0001652044\",\n            \"FUND_ISIN\": \"US02079K1079\",\n            \"FUND_TICKER\": \"GOOGL\",\n            \"as_of_date\": \"2019-09-30\",\n            \"valid_until_date\": \"2019-10-01\"\n          }\n        ],\n        \"factors\": [\n          {\n            \"name\": \"ESG_RATING\",\n            \"data_values\": [\n              {\n                \"value\": \"AA\",\n                \"as_of_date\": \"2019-09-30\",\n                \"as_at_date\": \"2019-12-02\"\n              },\n              {\n                \"value\": \"AA\",\n                \"as_of_date\": \"2019-10-31\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"FUND_NAME\",\n            \"data_values\": [\n              {\n                \"value\": \"ALPHABET INC.\",\n                \"as_of_date\": \"2019-09-30\",\n                \"as_at_date\": \"2019-12-02\"\n              },\n              {\n                \"value\": \"ALPHABET INC.\",\n                \"as_of_date\": \"2019-10-31\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"FUND_ISIN\",\n            \"data_values\": [\n              {\n                \"value\": \"US02079K1079\",\n                \"as_of_date\": \"2019-09-30\",\n                \"as_at_date\": \"2019-12-02\"\n              },\n              {\n                \"value\": \"US02079K1079\",\n                \"as_of_date\": \"2019-10-31\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"FUND_SEDOL\",\n            \"data_values\": [\n              {\n                \"value\": \"BYY88Y7\",\n                \"as_of_date\": \"2019-09-30\",\n                \"as_at_date\": \"2019-12-02\"\n              },\n              {\n                \"value\": \"BYY88Y7\",\n                \"as_of_date\": \"2019-10-31\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"FUND_ID\",\n            \"data_values\": [\n              {\n                \"value\": \"UFD000000001285781\",\n                \"as_of_date\": \"2019-09-01\"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n-------------------------------------------------------\n\n[[change_ranges_layout]*change_ranges layout:*\n\n*Input*\n---------------------\n{\n\t\"fund_identifier_list\": [\n\t\t\"UFD000000001285781\"\n\t],\n\t\"factor_name_list\": [\n        \"ESG_RATING\",\n        \"FUND_NAME\",\n        \"FUND_ISIN\",\n        \"FUND_SEDOL\",\n        \"FUND_ID\"\n\t],\n\n\t\"start_date\": \"2019-10-01\",\n\t\"end_date\": \"2019-12-01\",\n\t\"data_layout\": \"change_ranges\",\n\t\"inherit_missing_values\": true\n}\n---------------------\n\n*Output*\n-------------------------------------------------------\n{\n  \"status\": \"OK\",\n  \"code\": 200,\n  \"trace_id\": \"e8d5a08ec990f91d\",\n  \"timestamp\": \"2019-12-02T14:33:42Z\",\n  \"messages\": [],\n  \"result\": {\n    \"response_metadata\": {\n      \"total_number_of_funds\": 1,\n      \"total_number_of_unresolved_identifiers\": 0,\n      \"total_number_of_batches\": 1,\n      \"current_batch\": 1,\n      \"data_request_id\": \"1-938891fb-4e5a-4f37-9943-8908380d328b-2019-12-03T14:33:42+0000\",\n      \"data_request_id_expiration_time\": \"2019-12-03T14:33:42+0000\"\n    },\n    \"data\": [\n      {\n        \"requested_id\": \"UFD000000001285781\",\n        \"fund_metadata\": [\n          {\n            \"FUND_ID\": \"UFD000000001285781\",\n            \"FUND_NAME\": \"ALPHABET INC.\",\n            \"CIK_NUM\": \"0001652044\",\n            \"FUND_ISIN\": \"US02079K1079\",\n            \"FUND_TICKER\": \"GOOGL\",\n            \"as_of_date\": \"2019-10-01\",\n            \"valid_until_date\": \"2019-12-01\"\n          }\n        ],\n        \"factors\": [\n          {\n            \"name\": \"ESG_RATING\",\n            \"data_values\": [\n              {\n                \"value\": \"AA\",\n                \"as_of_date\": \"2019-10-01\",\n                \"valid_until_date\": \"2019-12-01\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"FUND_NAME\",\n            \"data_values\": [\n              {\n                \"value\": \"ALPHABET INC.\",\n                \"as_of_date\": \"2019-10-01\",\n                \"valid_until_date\": \"2019-12-01\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"FUND_ISIN\",\n            \"data_values\": [\n              {\n                \"value\": \"US02079K1079\",\n                \"as_of_date\": \"2019-10-01\",\n                \"valid_until_date\": \"2019-12-01\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"FUND_SEDOL\",\n            \"data_values\": [\n              {\n                \"value\": \"BYY88Y7\",\n                \"as_of_date\": \"2019-10-01\",\n                \"valid_until_date\": \"2019-12-01\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"FUND_ID\",\n            \"data_values\": [\n              {\n                \"value\": \"UFD000000001285781\",\n                \"as_of_date\": \"2019-10-01\",\n                \"valid_until_date\": \"2019-12-01\"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n-------------------------------------------------------\n\n[[matrix_by_factor_layout]*matrix_by_factor layout*\n\n*Input*\n----------------------\n{\n\t\"fund_identifier_list\": [\n\t\t\"UFD000000001285781\"\n\t],\n\t\"factor_name_list\": [\n        \"ESG_RATING\",\n        \"FUND_NAME\",\n        \"FUND_ISIN\",\n        \"FUND_SEDOL\",\n        \"FUND_ID\"\n\t],\n\n\t\"start_date\": \"2019-10-01\",\n\t\"end_date\": \"2019-11-01\",\n\t\"data_layout\": \"matrix_by_factor\",\n\t\"data_sample_frequency\": \"daily\",\n\t\"inherit_missing_values\": true\n}\n----------------------\n\n*Output*\n\n----------------------\n{\n  \"status\": \"OK\",\n  \"code\": 200,\n  \"trace_id\": \"f9bf384fed5e772c\",\n  \"timestamp\": \"2019-12-02T14:28:22Z\",\n  \"messages\": [],\n  \"result\": {\n    \"response_metadata\": {\n      \"total_number_of_funds\": 1,\n      \"total_number_of_unresolved_identifiers\": 0,\n      \"total_number_of_batches\": 2,\n      \"current_batch\": 1,\n      \"data_request_id\": \"2-5f7c93a3-debd-48ce-a780-01c7f0f4c294-2019-12-03T14:28:18+0000\",\n      \"data_request_id_expiration_time\": \"2019-12-03T14:28:18+0000\"\n    },\n    \"data\": {\n      \"requested_ids\": [\n        \"UFD000000001285781\"\n      ],\n      \"as_at_date\": \"2019-12-02\",\n      \"as_of_dates\": [\n        \"2019-10-01\",\n        \"2019-10-02\",\n        \"2019-10-03\",\n        \"2019-10-04\",\n        \"2019-10-05\",\n        \"2019-10-06\",\n        \"2019-10-07\",\n        \"2019-10-08\",\n        \"2019-10-09\",\n        \"2019-10-10\",\n        \"2019-10-11\",\n        \"2019-10-12\",\n        \"2019-10-13\",\n        \"2019-10-14\",\n        \"2019-10-15\",\n        \"2019-10-16\",\n        \"2019-10-17\",\n        \"2019-10-18\",\n        \"2019-10-19\",\n        \"2019-10-20\",\n        \"2019-10-21\",\n        \"2019-10-22\",\n        \"2019-10-23\",\n        \"2019-10-24\",\n        \"2019-10-25\",\n        \"2019-10-26\",\n        \"2019-10-27\",\n        \"2019-10-28\",\n        \"2019-10-29\",\n        \"2019-10-30\",\n        \"2019-10-31\"\n      ],\n      \"factors\": [\n        {\n          \"factor\": \"ESG_RATING\",\n          \"values\": [\n            [\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\"\n            ]\n          ]\n        },\n        {\n          \"factor\": \"FUND_NAME\",\n          \"values\": [\n            [\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\"\n            ]\n          ]\n        },\n        {\n          \"factor\": \"FUND_ISIN\",\n          \"values\": [\n            [\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\"\n            ]\n          ]\n        }\n      ]\n    }\n  }\n}\n----------------------\n"},"400":{"description":"\nA status of 400 indicates that there were problems with the request. The error response should give some indication as to the problem. The client should correct the request and resubmit."},"401":{"description":"\nA response code of 401 indicates that the there was a problem with the authentication credentials. Either the key or the secret (or both) were not recognized. The client should recheck their credentials and resubmit with correct credentials."},"403":{"description":"\nWhen a request returns with a 403 status code, it means that the credentials provided in the request are not entitled to access this endpoint. The credentials contained valid login information, but the account associated with the credentials has not been granted access to this endpoint. "},"404":{"description":"\nA status code of 404 indicates that the requested resource was not found. This could be the result of an invalid identifier or some other aspect of the request resulted in"},"500":{"description":"\nA status code of 500 indicates that the API suffered an unexpected error. There is no corrective action required by the client. If the error persists, please contact the support team."},"503":{"description":"\nA status code of 503 is an indication that the API was unable to complete the request due to a problem with a related service."}}}},"/instruments/history":{"get":{"summary":"(Beta Phase)","description":"The /instruments/history  endpoint provides a mechanism to retrieve ESG data history for a given set of instrument identifiers. A user of the API can send in a list of instrument identifiers, a range of dates, and a collection of data factors to retrieve, and the API will return the values for each of the requested factors for the given time range. There are several options available to control how much data is returned.  \n\nThe endpoint will support requests using both GET and POST. The POST method should be the method used by most API applications since it can support a larger request size (identifiers, factor names, etc.). The GET method would typically be used for quick experimental queries. \n\nThe API accepts two types of input parameters to the request, one form of input initiates a new retrieval request, the other is used to return subsequent batches of data. The /instruments/history  endpoint uses a dynamic batching scheme to return data if the results are too large to return in one request (see the section on data batching for more details on how large results are returned) \n\nThe basic request for data will include the following information:\n\n* A list of one or more identifiers. These identifiers will be used to locate bonds/equities (instruments) who have ESG Data. The identifiers can represent Bonds, Securities.\n* A list of data factors. The factors can be the names of the factors themselves. Factor information is available through other API endpoints such as /metadata/factors\n* A date range. The API supports date ranges of 1 date to many dates. \n* Other parameters to fine tune the request","operationId":"get-instruments-history-start_date-start_date-factor_name_list-factor_name_l","parameters":[{"name":"start_date","in":"query","description":"Format - date (as full-date in RFC3339). \nThe first date to be used for data retrieval. If only a start_date is given, only data for the specified date will be returned.","required":true,"schema":{"type":"string","format":"date","default":"json","x-Position":0,"x-AcceptedValue":"json, csv, xml","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null},"example":"json"},{"name":"factor_name_list","in":"query","description":"\nA list of ESG Factor names as defined in the ESG Factor Metadata. Factor names, but at least one factor name must be specified for a request to be valid.","required":true,"schema":{"type":"array","items":{"type":"string","x-Position":0},"default":"json","x-Position":0,"x-AcceptedValue":"json, csv, xml","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null},"example":"json"},{"name":"format","in":"query","description":"The result of the instruments endpoint will be returned in JSON format by default. However, the result can also be returned as a CSV file, which can then be imported directly into application such as Excel. The CSV format consists of a header row identifying each column, followed by one or more rows of data. The CSV format is supported with only  data_layout parameter value \"by_factor\".","schema":{"type":"string","default":"json","x-Position":0,"x-AcceptedValue":"json, csv","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null},"example":"json"},{"name":"data_layout","in":"query","description":"The API offers different data layouts to suit the different ways that a client may want to process the data that they receive. The Data Layout options provide a way for the client to tailor the output to their needs\n\n|====================\n|Data Layout Name |Description\n|by_factor\n|The data results will be grouped by factor, and within each factor the values will be display in reverse chronological order \n|matrix_by_factor\n|This layout is more compressed than the standard by_factor layout and is designed to support usage by quants who will want data rows with no gaps. The exact layout of the data content is still being finalized, but it will represent the data as a 2-d matrix. This layout is compatible with both daily and business_month_end sample frequencies. \n|change_ranges\n|This layout will only show change ranges for each value returned. Ranges will start at the first date in the requested range and end on the last date. If a value for a factor was value for 3 months in the range, and then changed and was valid for the remaining months, there would be two value ranges in the result for that particular value. \n|====================","schema":{"type":"string","default":"json","x-Position":0,"x-AcceptedValue":"json, csv, xml","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null},"example":"json"},{"name":"data_sample_frequency","in":"query","description":"\nThe API treats historical data as a continuous stream of values for the date range specified in the call. The user can choose how often they would like to sample the stream of data. Perhaps the client only cares about what the value is at the end of each month, for example. The following options are available for the Data Sample Frequency parameter:\n\n|====================\n|Data Sample Name |Description\n|daily\n|A data value sample will be taken from each date in the specified range. If there are 200 days in the given range, there will be 200 samples taken from the stream of values, one for each day in the range. The daily range is currently only available when using the matrix_by_factor layout.\n|business_month_end\n|A data value sample will be taken from each business month end date in the specified range. If there are 12 months in the given range, there will be 12 samples taken from the stream of values, one for each business month end day in the range \n|====================","schema":{"type":"string","default":"json","x-Position":0,"x-AcceptedValue":"json, csv, xml","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null},"example":"json"},{"name":"as_at_date","in":"query","description":"Format - date (as full-date in RFC3339). \nA date which defines which corrections should be returned. If the as_at_date is before the end_date, the as_at_date will override the end_date. No values will be returned beyond the specified as_at_date. If no as_at_date is specified, the data will be viewed from the perspective of the date that the request was made.\n\n\nThe 'as at' date functions like a time machine. It allows the client to go back in time to view data from a particular point in time in the past. The values that are returned will be the values that would have been seen if a request had been made on the specified 'as at' date.","schema":{"type":"string","format":"date","default":"json","x-Position":0,"x-AcceptedValue":"json, csv, xml","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null},"example":"json"},{"name":"end_date","in":"query","description":"Format - date (as full-date in RFC3339). \nThe end date for the range of values to be returned. If not specified, the request will return a single value corresponding to the given start_date. The end_date cannot exceed the as_at_date. If the end_date is after the as_at_date, the request will be rejected with a 400 status code.","schema":{"type":"string","format":"date","default":"json","x-Position":0,"x-AcceptedValue":"json, csv, xml","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null},"example":"json"},{"name":"instrument_identifier_list","in":"query","description":"\nA list of one or more instrument identifiers which resolve to issuers. Identifiers can be ISINs, CUSIPs, MDS UIDS, etc","schema":{"type":"array","items":{"type":"string","x-Position":0},"default":"json","x-Position":0,"x-AcceptedValue":"json, csv, xml","x-DictionaryEntry":null,"x-InputEncoding":[],"x-Description":null,"x-ShortDescription":null},"example":"json"}],"responses":{"200":{"description":"The issuers endpoint returns a collection of data for the issuers and datapoints requested. By default, the result is returned in JSON format. The results can also be returned as a CSV file if the request uses the format parameter, or if the accept header specifies text/csv as an acceptable result."},"400":{"description":"Bad Request"},"401":{"description":"Unauthorized"},"403":{"description":"Forbidden"},"404":{"description":"Not found"},"500":{"description":"Internal Server Error"},"503":{"description":"\nA status code of 503 is an indication that the API was unable to complete the request due to a problem with a related service."}}},"post":{"summary":"(Beta Phase)","description":"The /instruments/history  endpoint provides a mechanism to retrieve ESG data history for a given set of instrument identifiers. A user of the API can send in a list of instrument identifiers, a range of dates, and a collection of data factors to retrieve, and the API will return the values for each of the requested factors for the given time range. There are several options available to control how much data is returned.  \n\nThe endpoint will support requests using both GET and POST. The POST method should be the method used by most API applications since it can support a larger request size (identifiers, factor names, etc.). The GET method would typically be used for quick experimental queries. \n\nThe API accepts two types of input parameters to the request, one form of input initiates a new retrieval request, the other is used to return subsequent batches of data. The /instruments/history  endpoint uses a dynamic batching scheme to return data if the results are too large to return in one request (see the section on data batching for more details on how large results are returned) \n\nThe basic request for data will include the following information:\n\n* A list of one or more identifiers. These identifiers will be used to locate bonds/equities (instruments) who have ESG Data. The identifiers can represent Bonds, Securities.\n* A list of data factors. The factors can be the names of the factors themselves. Factor information is available through other API endpoints such as /metadata/factors\n* A date range. The API supports date ranges of 1 date to many dates. \n* Other parameters to fine tune the request","operationId":"post-instruments-history","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/InstrumentRequest"},"example":{"instrument_identifier_list":["US0378331005"],"factor_name_list":["VAR_EXW_AGG_FF_INSTR"],"data_sample_frequency":"daily","start_date":"2021-09-06","required":true}}}},"responses":{"200":{"description":"===== API Responses and Layouts \n\nAll responses from the API are returned in JSON format. All responses have a similar structure but at the core of any response is the data property. For example, all output from /issuers/history will have this basic structure: \n\n \n[source,json]\n----\n{ \n  \"status\": \"OK\", \n  \"code\": 200, \n  \"trace_id\": \"06b4f3a2d92f9d5a\", \n  \"timestamp\": \"2019-09-18T12:47:35Z\", \n  \"messages\": [], \n  \"result\": { \n    \"response_metadata\": { \n      \"total_number_of_instruments\": 1, \n      \"total_number_of_unresolved_identifiers\": 0, \n      \"total_number_of_batches\": 1, \n      \"current_batch\": 1, \n      \"data_request_id\": \"33e51f26-8c3e-4c84-ab00-2d60f945ec47\" \n    }, \n    \"data\":  <content controlled by data_layout option>\n  } \n} \n---- \n\nDifferent users have different ways that they would like to view the same data, so the API offers a data_layout option to account for this. The default data layout is the by_factor layout. This layout groups the data for each issuer in a list of factors, and within each factor, data is returned in reverse chronological order (newest to oldest). Other layouts are currently being designed, including a matrix layout which is a more condensed layout that is more suitable to use by quants and a change_ranges layout which would only return changed data points for the given time-period with information about when the data was valid.\n\n====== Standard Base Response\n\n\nThe API treats historical data as a continuous stream of values for the date range specified in the call. The user can choose how often they would like to sample the stream of data. Perhaps the client only cares about what the value is at the end of each month, for example. The following options are available for the Data Sample Frequency parameter:\n|====================\n|Property |Description\n|status|HTTP Status Code (string)\n|code|HTTP Status Code (integer)\n|trace_id|Trace ID for the request (string)\n|timestamp|ISO 8601 Date Format representing the time the response was generated (string) \n|messages|Array of informational strings relating to any warnings or other non-error issues \n|result|A JSON object containing the result (Result Object)\n|====================\n\n\n===== Result Object \n\nThe Result Object is a bundle of information containing the result and consists of the following properties: \n|================\n|Property|Description \n|response_meta_data|Meta data about the response (Response Meta Data) \n|data|Exact content changes based on the desired layout. The default layout for data is an array of Issuer Response objects \n|================\n \n\n===== Response Meta Data Object \n\nThe Response Meta Data object contains details about the request, including information on number of instruments requested, number of batches that can be returned, etc. The available properties are: \n,\n|================\n|Property|Description \n|total_number_of_instruments |Total number of instruments returned \n|total_number_of_unresolved_identifiers|Total number of identifiers that were not able to be resolved , An identifier is only unresolved if it did not exist at all during the specified time range \n|total_number_of_batches|Total number of result batches \n|current_batch |The index of the current batch \n|data_request_id |The id representing this request. It can be used in future requests to retrieve subsequent batches of data. \n|unresolved_identifiers |A list of Unresolved Identifier objects \n|unresolved_factors |A list of Unresolved Factor objects \n|================\n\n\n===== Unresolved Identifier Object \nThe Unresolved Identifier object is used to hold information about identifiers that were passed as parameters but were unable to be resolved for some reason and therefore data will not be returned. The available properties are: \n|================\n|Property|Description \n|identifier |The identifier as entered by the user \n|reason |A short string identifying why the identifier was not matched \n|================ \n\n\n===== Unresolved Factor Object \n\nThe Unresolved Factor object is used to hold information about factors that were passed as parameters but were not valid for some reason. The available properties are: \n|================\n|Property|Description  \n|factor name |The factor name as entered by the user \n|reason |A short string identifying why the identifier was not matched \n|================\n\n \n===== Data Layout Definitions  \n\nAs indicated previously, the history endpoint can represent the response using different layouts designed to suit different client needs. \n\n\n===== ,by_factor, Layout \n\nThe default Issuer Response object uses the by_factor layout. This organizes data into groups of factors for each requested identifier, where each factor will contain a set of data samples based on the sample frequency specified by the user. The object is keyed by the identifier given by the user in their input, but the data is the data for the issuer to which the identifier was resolved.  \n|================\n|Property|Description \n|requested_id |The requested ID of the issuer. This will be the id that the client used to identify the issuer and may be an instrument id, bond id, ticker, isin, etc. This id is not necessarily the ID of the issuer. If an instrument ID is given, perhaps a CUSIP, the id value will be the CUSIP requested by the user, the CUSIP (if it exists at all) for the issuer may be different \n|issuer_metadata |Array of Issuer Metadata objects \n|factors |Array of Factor Data objects \n|================\n\n\n===== Issuer Metadata Object\n\nThe Issuer Metadata object contains basic details about the issuer such as the issuer name and other identifiers that may be useful.  \n\nTo handle the possibility that issuer metadata may have changed over the course of the given date range, the object includes an as_of_date and a valid_until_date to identify the date range for which the metadata is valid. For example, a company name may have changed and for part of the date range the company was named A and for another part it was named B. The metadata will capture this information and indicate the range of dates for which the metadata is valid.  \n\nFor most results we expect there would only be one Issuer Metadata object. If there is only one metadata object, the as_of_date value would be the start of the specified date range, and the valid_until_date value would be the last date in the specified range.  \n\nNote that the metadata names are all upper case. This is because these are the names defined in the ESG Factor Metadata and we want to be consistent with our factor naming. \n|================\n|Property|Description  \n|ISSUER_NAME |The issuer name \n|ISSUER_ISIN |Issuer isin \n|ISSUER_LEI |Issuer lei \n|ISSUER_TICKER |Issuer ticker \n|CIK_NUM |Issuer CIK Number \n|ISSUERID |MSCI Issuer Id \n|as_of_date |Date for which the data is initially valid \n|valid_until_date |Last date for which data is valid \n|================\n\n \n===== Factor Data Object \n\nThe Factor Data object contains information for a requested data factor. The object is identified by its name and will contain an array of one or more Factor Data Value objects which contain the results for a specific date or timeframe. \n|================\n|Property|Description \n|name |The name of the factor. The name will be the column header defined in the ESG Factor Metadata \n|data_values |Array of Factor Data Value objects \n|================\n\n \n===== Factor Data Value Object \n\nThe Factor Data Value object contains the value for a single data factor for a single point in time or date range.  \n\nWhen a request is made, the client can specify a data sample frequency. For each date in the specified sample frequency a Factor Data Value object will exist containing the value for the given date, an as_of_date value indicating the date of the data sample, and an as_at date, which is the value the client will have passed in on the request.  \n\nFor example, if the client requests sampling on business_month_end dates, for the past 12 months, the result would contain 12 Factor Data Value factors for each requested data factor. The as_of_date in each object would be the appropriate business month end date. In all cases, the as_at_date will be the value passed in by the client in the request. \n\nIn the first version of the API, this by_factor layout will require the business_month_end data sample frequency. In the future we expect to expand this format to other sampling frequency values.  \n|================\n|Property|Description  \n|value|The value for the factor \n|as_of_date |The as_of_date for the factor \n|as_at_date |The as_at date used to determine the value \n|================\n\n*See <<by_factor_layout>> for full example*\n\n====== ,change_ranges, Layout \n\nThe change_ranges layout is very similar to the standard by_factor layout. The only difference is in the way the data values are represented. In the by_factor layout, we represent each value as a single point in time, this is why the data value only has as_of_date and as_at_date properties for dates. The user has requested a value for a specific point in time.  \n\n\nThe change_ranges layout is used when the client only cares about the unique values for a data factor over a specified time range. If the user requests the ESG Rating for Microsoft for the past year, they might only care to see how the rating changed over the time-period. The client might not want to see 12 A values, for example. \n\n\nAs mentioned, the data structure for the change_ranges layout is virtually identical to by_factor. Instead of using the Factor Data Value object in the Factor Data Object, a Factor Data Change Value Object will be used. \n\n====== Factor Data Change Value Object \n\nThe Factor Data Change Value object contains the value for a single data factor for a specific validity range. The object has properties to indicate the as_of_date when the factor value should be considered value, and a valid_until_date which represents the date that the value changed to a new value.  \n\nUnlike the by_factor layout, the change_ranges layout does not support a data_sample_frequency value. For this layout, there is no concept of data sampling, the data output just represents all the changes that exist within the time range specified in the request. A request for 12 months of data could result in 1 or more data values, depending on how many times the value of the factor changed in the time-period.  \n|================\n|Property|Description \n|value |The value for the factor \n|as_of_date |The as_of_date for the factor \n|valid_until_date |The date a new value took effect. The value should be considered valid up until this date. \n|as_at_date |The as_at date used to determine the value \n|================\n \n\nSee <<change_ranges_layout>> for full example\n\n====== ,matrix_by_factor, Layout \n\nThe currently proposed output of the matrix_by_factor layout would take the following form: \n\nAs with the by_factor layout, the matrix_by_factor layout would be contained within the standard response JSON structure described earlier: \n|================\n|Property|Description \n|status |Http Status Code (string) \n|code |Http Status Code (integer) \n|trace_id |Trace id for the request (string) \n|timestamp |ISO 8601 Date Format representing the time the response was generated (string) \n|messages |Array of informational strings relating to any warnings or other non-error issues \n|result |A JSON object containing the result (Result Object) \n|================\n \n\n===== Result Object \n\nThe Result Object of a matrix_by_layout data layout has a change with the content of the data property. Instead of being an array of Issuer Response objects, the data object simply contains a single JSON object with three properties which represent the matrix of information to be returned: \n|================\n|Property|Description \n|response_meta_data |Meta data about the response (Response Meta Data) \n|data |A single instance of a Matrix Data Object \n|================\n\n \n===== Matrix Data Object \n\nThe Matrix Data Object is a JSON object with the following structure and content: \n|================\n|Property|Description \n|requested_ids |An array of strings containing the issuer identifiers given in the request. If 10 identifiers are given, the array will contain 10 values \n|dates |An array of dates which encompass the specified date range and data sample frequency in YYYY-MM-DD format. The dates will be in chronological order from oldest to newest. \n|factors |An array containing one or more Matrix Factor objects \n|================\n\n\n===== Matrix Factor Object \n\nThe Matrix Factor Object contains all the values for all of the dates and issuers for a single data factor. It has the following properties: \n|================\n|Property|Description \n|factor|The name of the data factor \n|values|This is an array of arrays of data values. The outermost array contains data values for each of the requested ids. The inner array represents all the data values for the given factor for the requested dates \n|================  \n\n\nSee <<matrix_by_factor_layout>> for full example\n\n===== *Sample Outputs*\n\n[[by_factor_layout]]*by_factor layout:*\n\n*Input*\n\n----------\n{\n\t\"issuer_identifier_list\": [\n\t\t\"IID000000002745031\"\n\t],\n\t\"factor_name_list\": [\n        \"ESG_RATING\",\n        \"ISSUER_NAME\",\n        \"ISSUER_ISIN\",\n        \"ISSUER_SEDOL\",\n        \"ISSUERID\"\n\t],\n\n\t\"start_date\": \"2019-09-01\",\n\t\"end_date\": \"2019-12-01\",\n\t\"data_layout\": \"by_factor\",\n\t\"data_sample_frequency\": \"business_month_end\",\n\t\"inherit_missing_values\": true\n}\n----------\n\n*Output*\n-------------------------------------------------------\n{\n  \"status\": \"OK\",\n  \"code\": 200,\n  \"trace_id\": \"158760f24d9cd939\",\n  \"timestamp\": \"2019-12-02T14:22:41Z\",\n  \"messages\": [],\n  \"result\": {\n    \"response_metadata\": {\n      \"total_number_of_instruments\": 1,\n      \"total_number_of_unresolved_identifiers\": 0,\n      \"total_number_of_batches\": 1,\n      \"current_batch\": 1,\n      \"data_request_id\": \"0-e4891be4-af17-4c43-980e-c524fc4a8350-2019-12-03T14:22:08+0000\",\n      \"data_request_id_expiration_time\": \"2019-12-03T14:22:08+0000\"\n    },\n    \"data\": [\n      {\n        \"requested_id\": \"IID000000002745031\",\n        \"issuer_metadata\": [\n          {\n            \"ISSUERID\": \"IID000000002745031\",\n            \"ISSUER_NAME\": \"ALPHABET INC.\",\n            \"CIK_NUM\": \"0001652044\",\n            \"ISSUER_ISIN\": \"US02079K1079\",\n            \"ISSUER_TICKER\": \"GOOGL\",\n            \"as_of_date\": \"2019-09-30\",\n            \"valid_until_date\": \"2019-10-01\"\n          }\n        ],\n        \"factors\": [\n          {\n            \"name\": \"ESG_RATING\",\n            \"data_values\": [\n              {\n                \"value\": \"AA\",\n                \"as_of_date\": \"2019-09-30\",\n                \"as_at_date\": \"2019-12-02\"\n              },\n              {\n                \"value\": \"AA\",\n                \"as_of_date\": \"2019-10-31\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"ISSUER_NAME\",\n            \"data_values\": [\n              {\n                \"value\": \"ALPHABET INC.\",\n                \"as_of_date\": \"2019-09-30\",\n                \"as_at_date\": \"2019-12-02\"\n              },\n              {\n                \"value\": \"ALPHABET INC.\",\n                \"as_of_date\": \"2019-10-31\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"ISSUER_ISIN\",\n            \"data_values\": [\n              {\n                \"value\": \"US02079K1079\",\n                \"as_of_date\": \"2019-09-30\",\n                \"as_at_date\": \"2019-12-02\"\n              },\n              {\n                \"value\": \"US02079K1079\",\n                \"as_of_date\": \"2019-10-31\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"ISSUER_SEDOL\",\n            \"data_values\": [\n              {\n                \"value\": \"BYY88Y7\",\n                \"as_of_date\": \"2019-09-30\",\n                \"as_at_date\": \"2019-12-02\"\n              },\n              {\n                \"value\": \"BYY88Y7\",\n                \"as_of_date\": \"2019-10-31\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"ISSUERID\",\n            \"data_values\": [\n              {\n                \"value\": \"IID000000002745031\",\n                \"as_of_date\": \"2019-09-01\"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n-------------------------------------------------------\n\n[[change_ranges_layout]*change_ranges layout:*\n\n*Input*\n---------------------\n{\n\t\"issuer_identifier_list\": [\n\t\t\"IID000000002745031\"\n\t],\n\t\"factor_name_list\": [\n        \"ESG_RATING\",\n        \"ISSUER_NAME\",\n        \"ISSUER_ISIN\",\n        \"ISSUER_SEDOL\",\n        \"ISSUERID\"\n\t],\n\n\t\"start_date\": \"2019-10-01\",\n\t\"end_date\": \"2019-12-01\",\n\t\"data_layout\": \"change_ranges\",\n\t\"inherit_missing_values\": true\n}\n---------------------\n\n*Output*\n-------------------------------------------------------\n{\n  \"status\": \"OK\",\n  \"code\": 200,\n  \"trace_id\": \"e8d5a08ec990f91d\",\n  \"timestamp\": \"2019-12-02T14:33:42Z\",\n  \"messages\": [],\n  \"result\": {\n    \"response_metadata\": {\n      \"total_number_of_instruments\": 1,\n      \"total_number_of_unresolved_identifiers\": 0,\n      \"total_number_of_batches\": 1,\n      \"current_batch\": 1,\n      \"data_request_id\": \"1-938891fb-4e5a-4f37-9943-8908380d328b-2019-12-03T14:33:42+0000\",\n      \"data_request_id_expiration_time\": \"2019-12-03T14:33:42+0000\"\n    },\n    \"data\": [\n      {\n        \"requested_id\": \"IID000000002745031\",\n        \"issuer_metadata\": [\n          {\n            \"ISSUERID\": \"IID000000002745031\",\n            \"ISSUER_NAME\": \"ALPHABET INC.\",\n            \"CIK_NUM\": \"0001652044\",\n            \"ISSUER_ISIN\": \"US02079K1079\",\n            \"ISSUER_TICKER\": \"GOOGL\",\n            \"as_of_date\": \"2019-10-01\",\n            \"valid_until_date\": \"2019-12-01\"\n          }\n        ],\n        \"factors\": [\n          {\n            \"name\": \"ESG_RATING\",\n            \"data_values\": [\n              {\n                \"value\": \"AA\",\n                \"as_of_date\": \"2019-10-01\",\n                \"valid_until_date\": \"2019-12-01\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"ISSUER_NAME\",\n            \"data_values\": [\n              {\n                \"value\": \"ALPHABET INC.\",\n                \"as_of_date\": \"2019-10-01\",\n                \"valid_until_date\": \"2019-12-01\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"ISSUER_ISIN\",\n            \"data_values\": [\n              {\n                \"value\": \"US02079K1079\",\n                \"as_of_date\": \"2019-10-01\",\n                \"valid_until_date\": \"2019-12-01\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"ISSUER_SEDOL\",\n            \"data_values\": [\n              {\n                \"value\": \"BYY88Y7\",\n                \"as_of_date\": \"2019-10-01\",\n                \"valid_until_date\": \"2019-12-01\",\n                \"as_at_date\": \"2019-12-02\"\n              }\n            ]\n          },\n          {\n            \"name\": \"ISSUERID\",\n            \"data_values\": [\n              {\n                \"value\": \"IID000000002745031\",\n                \"as_of_date\": \"2019-10-01\",\n                \"valid_until_date\": \"2019-12-01\"\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n-------------------------------------------------------\n\n[[matrix_by_factor_layout]*matrix_by_factor layout*\n\n*Input*\n----------------------\n{\n\t\"issuer_identifier_list\": [\n\t\t\"IID000000002745031\"\n\t],\n\t\"factor_name_list\": [\n        \"ESG_RATING\",\n        \"ISSUER_NAME\",\n        \"ISSUER_ISIN\",\n        \"ISSUER_SEDOL\",\n        \"ISSUERID\"\n\t],\n\n\t\"start_date\": \"2019-10-01\",\n\t\"end_date\": \"2019-11-01\",\n\t\"data_layout\": \"matrix_by_factor\",\n\t\"data_sample_frequency\": \"daily\",\n\t\"inherit_missing_values\": true\n}\n----------------------\n\n*Output*\n\n----------------------\n{\n  \"status\": \"OK\",\n  \"code\": 200,\n  \"trace_id\": \"f9bf384fed5e772c\",\n  \"timestamp\": \"2019-12-02T14:28:22Z\",\n  \"messages\": [],\n  \"result\": {\n    \"response_metadata\": {\n      \"total_number_of_instruments\": 1,\n      \"total_number_of_unresolved_identifiers\": 0,\n      \"total_number_of_batches\": 2,\n      \"current_batch\": 1,\n      \"data_request_id\": \"2-5f7c93a3-debd-48ce-a780-01c7f0f4c294-2019-12-03T14:28:18+0000\",\n      \"data_request_id_expiration_time\": \"2019-12-03T14:28:18+0000\"\n    },\n    \"data\": {\n      \"requested_ids\": [\n        \"IID000000002745031\"\n      ],\n      \"as_at_date\": \"2019-12-02\",\n      \"as_of_dates\": [\n        \"2019-10-01\",\n        \"2019-10-02\",\n        \"2019-10-03\",\n        \"2019-10-04\",\n        \"2019-10-05\",\n        \"2019-10-06\",\n        \"2019-10-07\",\n        \"2019-10-08\",\n        \"2019-10-09\",\n        \"2019-10-10\",\n        \"2019-10-11\",\n        \"2019-10-12\",\n        \"2019-10-13\",\n        \"2019-10-14\",\n        \"2019-10-15\",\n        \"2019-10-16\",\n        \"2019-10-17\",\n        \"2019-10-18\",\n        \"2019-10-19\",\n        \"2019-10-20\",\n        \"2019-10-21\",\n        \"2019-10-22\",\n        \"2019-10-23\",\n        \"2019-10-24\",\n        \"2019-10-25\",\n        \"2019-10-26\",\n        \"2019-10-27\",\n        \"2019-10-28\",\n        \"2019-10-29\",\n        \"2019-10-30\",\n        \"2019-10-31\"\n      ],\n      \"factors\": [\n        {\n          \"factor\": \"ESG_RATING\",\n          \"values\": [\n            [\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\",\n              \"AA\"\n            ]\n          ]\n        },\n        {\n          \"factor\": \"ISSUER_NAME\",\n          \"values\": [\n            [\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\",\n              \"ALPHABET INC.\"\n            ]\n          ]\n        },\n        {\n          \"factor\": \"ISSUER_ISIN\",\n          \"values\": [\n            [\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\",\n              \"US02079K1079\"\n            ]\n          ]\n        }\n      ]\n    }\n  }\n}\n----------------------\n"},"400":{"description":"\nA status of 400 indicates that there were problems with the request. The error response should give some indication as to the problem. The client should correct the request and resubmit."},"401":{"description":"\nA response code of 401 indicates that the there was a problem with the authentication credentials. Either the key or the secret (or both) were not recognized. The client should recheck their credentials and resubmit with correct credentials."},"403":{"description":"\nWhen a request returns with a 403 status code, it means that the credentials provided in the request are not entitled to access this endpoint. The credentials contained valid login information, but the account associated with the credentials has not been granted access to this endpoint. "},"404":{"description":"\nA status code of 404 indicates that the requested resource was not found. This could be the result of an invalid identifier or some other aspect of the request resulted in"},"500":{"description":"\nA status code of 500 indicates that the API suffered an unexpected error. There is no corrective action required by the client. If the error persists, please contact the support team."},"503":{"description":"\nA status code of 503 is an indication that the API was unable to complete the request due to a problem with related service."}}}}},"components":{"schemas":{"ResultObject":{"title":"ResultObject","type":"object","x-DictionaryEntry":null},"IssuerRequest":{"title":"IssuerRequest","type":"object","properties":{"issuer_identifier_list":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":0},"issuer_identifier_type":{"type":"string","description":"The issuer identifier type is a string defining the factor name used for issuers in the issuer_identifer_list parameter. Available options vary by user, but include ISSUER_ID, ISIN, CIK, CUSIP, LEI, SEDOL","x-Position":1},"index_identifier_list":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":2},"country_code_list":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":3},"esg_industry_id_list":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":4},"gics_subindustry_id_list":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":5},"starts_with":{"type":"string","description":"Locate issuers whose name starts with the given value and return requested data related to those issuers. If parent/child is specified, the related issuers will not necessarily have names that start with the given string. The value is only used to identify the primary issuers that are the result of the query.","x-Position":6},"name_contains":{"type":"string","description":"If a name_contains value is specified, only issuers that have the specified string will be included in the results.","x-Position":7},"coverage":{"type":"string","description":"A coverage is used to restrict the results to issuers which have certain properties relating to data coverage. For example, the AGR coverage would restrict issuers to those which have an AGR rating. The list of coverages that are available for a user is found at the /parameterValues/coverages endpoint.","x-Position":8},"factor_name_list":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":9},"category_path_list":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":10},"product_name_list":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":11},"parent_child":{"type":"string","description":"The parent_child option is used to control whether other issuers or values are to be inherited or displayed based on the subsidiary structure of an issuer. The availability of this feature is based on client permissions. The default action is do_not_apply.","x-AcceptedValue":"do_not_apply, inherit_missing_values, include_subsidiares, full_parent_child","x-Default":"do_not_apply","x-Position":12},"reference_column_list":{"type":"array","items":{"type":"string","description":"The specific reference column to include for each inherited data factor.","x-AcceptedValue":"issuerid, issuer_id, issuername, issuer_name, level","x-Position":0},"x-Position":13},"limit":{"type":"integer","description":"The limit parameter is used to define the maximum number of results that will be returned in the request. This parameter is option, however some data requests will result in a large number of issuers being returned. When this is detected by the API, an error will be returned indicating that a limit must be specified.","format":"int32","x-ValidationConstraints":"Must be greater than 1","x-Position":14},"offset":{"type":"integer","description":"The offset value is paired with a limit parameter to define a window of results. When a limit is specified without an offset, the offset is treated as 0. This means that the results will contain the first record, up to the limit of items requested. To get the next 'page', a new offset must be specified.\n\nWhen paging is in effect, and JSON is being returned, the results will include predefined links which can be used to get the next, previous, first, and last pages based on the limit and offset values given in the request.","format":"int32","x-ValidationConstraints":"Must be 0 or greater","x-Position":15},"format":{"type":"string","description":"An optional format parameter can be specified to control the format of the output. Allowable values are:\n\n* JSON\n* CSV\n* XML","x-AcceptedValue":"JSON, CSV, XML","x-Default":"JSON","x-Position":16}},"x-DictionaryEntry":null},"DataBatchRequest":{"title":"DataBatchRequest","required":["batch_id","data_request_id"],"type":"object","properties":{"data_request_id":{"type":"string","description":"\nThe data_request_id is an identifier that is assigned to a data request. It acts as a key to retrieve additional batches of information. The key remains valid for as long as data is being requested, but will expire at some point and cannot be used for caching purposes . The data_request_id is always displayed in the *response_metadata* section of the response.","x-Position":0},"batch_id":{"type":"integer","description":"\nThe batch_id parameter is used to identify which batch of data to retrieve. Multrple requests with the same data_request_id and same batch_id will return the same results. This will be true until the data_request_id expires after a period of inactivity.   \n","format":"int32","x-Position":1}},"description":"\nThe parameters used in this request control the set of data that is returned for a multi-batch response. The client can make parallel requests for the same data_request_id, but providing different batch_id values.","x-DictionaryEntry":null},"FundRequest":{"title":"FundRequest","type":"object","properties":{"fund_identifier_list":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":0},"fund_identifier_type":{"type":"string","description":"The fund identifier type is a string defining the factor name used for to identify funds speciified in the fund_identifer_list parameter. Available options vary by user, but include one ore more of the following ASSET_OVERVIEW_ID, ISIN, SHARE_CLASS_ID, TICKER","x-AcceptedValue":"ASSET_OVERVIEW_ID, ISIN, SHARE_CLASS_ID, TICKER","x-Default":"ISIN","x-Position":1},"fund_asset_class_list":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":2},"fund_asset_universe_list":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":3},"fund_domicile_list":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":4},"fund_lipper_global_class_list":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":5},"fund_metrics_universe_only":{"type":"boolean","description":"The fund_metrics_universe_only flag restricts the funds that are retrieved to only those that are in the MSCI Fund Metrics Universe","x-Default":"True","x-Position":6},"starts_with":{"type":"string","description":"Locate issuers whose name starts with the given value and return requested data related to those issuers. If parent/child is specified, the related issuers will not necessarily have names that start with the given string. The value is only used to identify the primary issuers that are the result of the query.","x-Position":7},"name_contains":{"type":"string","description":"If a name_contains value is specified, only issuers that have the specified string will be included in the results.","x-Position":8},"factor_name_list":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":9},"category_path_list":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":10},"product_name_list":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":11},"limit":{"type":"integer","description":"The limit parameter is used to define the maximum number of results that will be returned in the request. This parameter is option, however some data requests will result in a large number of issuers being returned. When this is detected by the API, an error will be returned indicating that a limit must be specified.","format":"int32","x-ValidationConstraints":"Must be greater than 1","x-Position":12},"offset":{"type":"integer","description":"The offset value is paired with a limit parameter to define a window of results. When a limit is specified without an offset, the offset is treated as 0. This means that the results will contain the first record, up to the limit of items requested. To get the next 'page', a new offset must be specified.\n\nWhen paging is in effect, and JSON is being returned, the results will include predefined links which can be used to get the next, previous, first, and last pages based on the limit and offset values given in the request.","format":"int32","x-ValidationConstraints":"Must be 0 or greater","x-Position":13},"format":{"type":"string","description":"The result of the issuers endpoint will be returned in JSON format by default. However, the result can also be returned as a CSV file, which can then be imported directly into application such as Excel. The CSV format consists of a header row identifying each column, followed by one or more rows of data. XML can also be specified and the result will be a properly formatted XML document without a DTD or schema.","x-AcceptedValue":"json, csv, xml","x-Default":"json","x-Position":14},"fund_metrics_coverage_only":{"type":"string","description":"The fund_metrics_coverage_only flag is supposed to limit results to funds in fund metrics coverage if set to true. If you want to have fund which are not part of coverage you need to add fund_metrics_coverage_only=false in the API query.By default fund endpoint fund_metrics_coverage_only is set to true. By default fund endpoint fund_metrics_coverage_only is set to true. If you set it to false, it will find funds that aren't in the fund metrics universe but not include those that are in the universe.","x-AcceptedValue":"true,false","x-Default":true,"x-Position":15}},"x-DictionaryEntry":null},"IssuerHistoryRequest":{"title":"IssuerHistoryRequest","required":["issuer_identifier_list","start_date"],"type":"object","properties":{"issuer_identifier_list":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":0},"category_path_list":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":1},"product_name_list":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":2},"factor_name_list":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":3},"start_date":{"type":"string","description":"\nThe first date to be used for data retrieval. If only a start_date is given, only data for the specified date will be returned.","format":"date","x-Position":4},"end_date":{"type":"string","description":"\nThe end date for the range of values to be returned. If not specified, the request will return a single value corresponding to the given start_date. The end_date cannot exceed the as_at_date. If the end_date is after the as_at_date, the request will be rejected with a 400 status code.","format":"date","x-Position":5},"as_at_date":{"type":"string","description":"\nA date which defines which corrections should be returned. If the as_at_date is before the end_date, the as_at_date will override the end_date. No values will be returned beyond the specified as_at_date. If no as_at_date is specified, the data will be viewed from the perspective of the date that the request was made.","format":"date","x-Position":6},"data_sample_frequency":{"type":"string","description":"\nThe API treats historical data as a continuous stream of values for the date range specified in the call. The user can choose how often they would like to sample the stream of data. Perhaps the client only cares about what the value is at the end of each month, for example. The following options are available for the Data Sample Frequency parameter:\n|====================\n|Data Sample Name |Description\n|daily\n|A data value sample will be taken from each date in the specified range. If there are 200 days in the given range, there will be 200 samples taken from the stream of values, one for each day in the range. The daily range is currently only available when using the matrix_by_factor layout.\n|business_month_end\n|A data value sample will be taken from each business month end date in the specified range. If there are 12 months in the given range, there will be 12 samples taken from the stream of values, one for each business month end day in the range \n|====================\n","x-Position":7},"data_layout":{"type":"string","description":"\nThe API offers different data layouts to suit the different ways that a client may want to process the data that they receive. The Data Layout options provide a way for the client to tailor the output to their needs\n|====================\n|Data Layout Name |Description\n|by_factor\n|The data results will be grouped by factor, and within each factor the values will be display in reverse chronological order \n|matrix_by_factor\n|This layout is more compressed than the standard by_factor layout and is designed to support usage by quants who will want data rows with no gaps. The exact layout of the data content is still being finalized, but it will represent the data as a 2-d matrix. This layout is compatible with both daily and business_month_end sample frequencies. \n|change_ranges\n|This layout will only show change ranges for each value returned. Ranges will start at the first date in the requested range and end on the last date. If a value for a factor was value for 3 months in the range, and then changed and was valid for the remaining months, there would be two value ranges in the result for that particular value. \n|====================\n","x-Position":8},"inherit_missing_values":{"type":"boolean","description":"A Boolean value used to indicate whether the API should inherit missing values from a parent issuer. This option will automatically be set to true if the caller is permitted to receive inherited data. This option is not available to clients who do not have the inheritance feature associated with their account.","x-Position":9},"format":{"type":"string","description":"The result of the issuers endpoint will be returned in JSON format by default. However, the result can also be returned as a CSV file, which can then be imported directly into application such as Excel. The CSV format consists of a header row identifying each column, followed by one or more rows of data. The CSV format is supported with only  data_layout parameter value 'by_factor'.","x-Position":10}},"x-DictionaryEntry":null},"InstrumentRequest":{"title":"InstrumentRequest","required":["instrument_identifier_list","factor_name_list","start_date"],"type":"object","properties":{"instrument_identifier_list":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":0},"category_path_list":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":1},"product_name_list":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":2},"factor_name_list":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":3},"start_date":{"type":"string","description":"\nThe first date to be used for data retrieval. If only a start_date is given, only data for the specified date will be returned.","format":"date","x-Position":4},"end_date":{"type":"string","description":"\nThe end date for the range of values to be returned. If not specified, the request will return a single value corresponding to the given start_date. The end_date cannot exceed the as_at_date. If the end_date is after the as_at_date, the request will be rejected with a 400 status code.","format":"date","x-Position":5},"as_at_date":{"type":"string","description":"\nA date which defines which corrections should be returned. If the as_at_date is before the end_date, the as_at_date will override the end_date. No values will be returned beyond the specified as_at_date. If no as_at_date is specified, the data will be viewed from the perspective of the date that the request was made.","format":"date","x-Position":6},"data_sample_frequency":{"type":"string","description":"\nThe API treats historical data as a continuous stream of values for the date range specified in the call. The user can choose how often they would like to sample the stream of data. Perhaps the client only cares about what the value is at the end of each month, for example. The following options are available for the Data Sample Frequency parameter:\n|====================\n|Data Sample Name |Description\n|daily\n|A data value sample will be taken from each date in the specified range. If there are 200 days in the given range, there will be 200 samples taken from the stream of values, one for each day in the range. The daily range is currently only available when using the matrix_by_factor layout.\n|business_month_end\n|A data value sample will be taken from each business month end date in the specified range. If there are 12 months in the given range, there will be 12 samples taken from the stream of values, one for each business month end day in the range \n|====================\n","x-Position":7},"data_layout":{"type":"string","description":"\nThe API offers different data layouts to suit the different ways that a client may want to process the data that they receive. The Data Layout options provide a way for the client to tailor the output to their needs\n|====================\n|Data Layout Name |Description\n|by_factor\n|The data results will be grouped by factor, and within each factor the values will be display in reverse chronological order \n|matrix_by_factor\n|This layout is more compressed than the standard by_factor layout and is designed to support usage by quants who will want data rows with no gaps. The exact layout of the data content is still being finalized, but it will represent the data as a 2-d matrix. When values for requested factors and/or dates are not available, a null value will be given in the result. This layout is compatible with both daily and business_month_end sample frequencies. \n|change_ranges\n|This layout will only show change ranges for each value returned. Ranges will start at the first date in the requested range and end on the last date. If a value for a factor was value for 3 months in the range, and then changed and was valid for the remaining months, there would be two value ranges in the result for that particular value. \n|====================\n","x-Position":8},"format":{"type":"string","description":"The result of the instrument endpoint will be returned in JSON format by default. However, the result can also be returned as a CSV file, which can then be imported directly into application such as Excel. The CSV format consists of a header row identifying each column, followed by one or more rows of data. The CSV format is supported with only  data_layout parameter value 'by_factor'.","x-Position":9}},"x-DictionaryEntry":null},"Unresolved_Identifier":{"title":"Unresolved Identifier","type":"object","properties":{"identifier":{"type":"string","description":"The identifier as entered by the user","x-Position":0},"reason":{"type":"string","description":"A short string identifying why the identifier was matched","x-Position":1}},"x-DictionaryEntry":null},"Response_Meta_Data":{"title":"Response Meta Data","type":"object","properties":{"total_number_of_instruments":{"type":"integer","description":"Total number of instruments returned","format":"int32","x-Position":0},"total_number_of_unresolved_identifiers":{"type":"integer","description":"Total number of identifiers that were not able to be resolved An identifier is only unresolved if it did not exist at all during the specified time range","format":"int32","x-Position":1},"total_number_of_batches":{"type":"integer","description":"Total number of result batches","format":"int32","x-Position":2},"current_batch":{"type":"integer","description":"The index of the current batch","format":"int32","x-Position":3},"data_request_id":{"type":"string","description":"The id representing this request. It can be used in future requests to retrieve subsequent batches of data.","x-Position":4},"unresolved_identifiers":{"type":"array","items":{"$ref":"#/components/schemas/Unresolved_Identifier"},"x-Position":5}},"x-DictionaryEntry":null},"FundHistoryRequest":{"title":"FundHistoryRequest","required":["fund_identifier_list","start_date"],"type":"object","properties":{"fund_identifier_list":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":0},"category_path_list":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":1},"product_name_list":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":2},"factor_name_list":{"type":"array","items":{"type":"string","x-Position":0},"x-Position":3},"start_date":{"type":"string","description":"\nThe first date to be used for data retrieval. If only a start_date is given, only data for the specified date will be returned.","format":"date","x-Position":4},"end_date":{"type":"string","description":"\nThe end date for the range of values to be returned. If not specified, the request will return a single value corresponding to the given start_date. The end_date cannot exceed the as_at_date. If the end_date is after the as_at_date, the request will be rejected with a 400 status code.","format":"date","x-Position":5},"as_at_date":{"type":"string","description":"\nA date which defines which corrections should be returned. If the as_at_date is before the end_date, the as_at_date will override the end_date. No values will be returned beyond the specified as_at_date. If no as_at_date is specified, the data will be viewed from the perspective of the date that the request was made.","format":"date","x-Position":6},"data_sample_frequency":{"type":"string","description":"\nThe API treats historical data as a continuous stream of values for the date range specified in the call. The user can choose how often they would like to sample the stream of data. Perhaps the client only cares about what the value is at the end of each month, for example. The following options are available for the Data Sample Frequency parameter:\n|====================\n|Data Sample Name |Description\n|daily\n|A data value sample will be taken from each date in the specified range. If there are 200 days in the given range, there will be 200 samples taken from the stream of values, one for each day in the range. The daily range is currently only available when using the matrix_by_factor layout.\n|business_month_end\n|A data value sample will be taken from each business month end date in the specified range. If there are 12 months in the given range, there will be 12 samples taken from the stream of values, one for each business month end day in the range \n|====================\n","x-Position":7},"data_layout":{"type":"string","description":"\nThe API offers different data layouts to suit the different ways that a client may want to process the data that they receive. The Data Layout options provide a way for the client to tailor the output to their needs\n|====================\n|Data Layout Name |Description\n|by_factor\n|The data results will be grouped by factor, and within each factor the values will be display in reverse chronological order \n|matrix_by_factor\n|This layout is more compressed than the standard by_factor layout and is designed to support usage by quants who will want data rows with no gaps. The exact layout of the data content is still being finalized, but it will represent the data as a 2-d matrix. This layout is compatible with both daily and business_month_end sample frequencies. \n|change_ranges\n|This layout will only show change ranges for each value returned. Ranges will start at the first date in the requested range and end on the last date. If a value for a factor was value for 3 months in the range, and then changed and was valid for the remaining months, there would be two value ranges in the result for that particular value. \n|====================\n","x-Position":8},"inherit_missing_values":{"type":"boolean","description":"A Boolean value used to indicate whether the API should inherit missing values from a parent issuer. This option will automatically be set to true if the caller is permitted to receive inherited data. This option is not available to clients who do not have the inheritance feature associated with their account.","x-Position":9},"format":{"type":"string","description":"The result of the fund History endpoint will be returned in JSON format by default. However, the result can also be returned as a CSV file, which can then be imported directly into application such as Excel. The CSV format consists of a header row identifying each column, followed by one or more rows of data. The CSV format is supported with only  data_layout parameter value 'by_factor'.","x-Position":10}},"x-DictionaryEntry":null}},"securitySchemes":{"basicAuth":{"type":"http","scheme":"basic"}}},"security":[{"basicAuth":[]}],"tags":[{"name":"esg"}]}